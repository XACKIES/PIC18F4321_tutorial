

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Mon Jan 06 17:36:54 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1,group=2
    11                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1,group=3
    13                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1,group=3
    16                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1,group=3
    17                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1,group=3
    18                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1,group=2
    19                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1,group=2
    20                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    26   000000                     
    27                           ; Generated 23/03/2023 GMT
    28                           ; 
    29                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F4321 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61   000FE0                     bsr             equ	4064
    62   000FE9                     fsr0            equ	4073
    63   000FEA                     fsr0h           equ	4074
    64   000FE9                     fsr0l           equ	4073
    65   000FE1                     fsr1            equ	4065
    66   000FE2                     fsr1h           equ	4066
    67   000FE1                     fsr1l           equ	4065
    68   000FD9                     fsr2            equ	4057
    69   000FDA                     fsr2h           equ	4058
    70   000FD9                     fsr2l           equ	4057
    71   000FEF                     indf0           equ	4079
    72   000FE7                     indf1           equ	4071
    73   000FDF                     indf2           equ	4063
    74   000FF2                     intcon          equ	4082
    75   000000                     nvmcon          equ	0
    76   000FF9                     pcl             equ	4089
    77   000FFA                     pclath          equ	4090
    78   000FFB                     pclatu          equ	4091
    79   000FEB                     plusw0          equ	4075
    80   000FE3                     plusw1          equ	4067
    81   000FDB                     plusw2          equ	4059
    82   000FED                     postdec0        equ	4077
    83   000FE5                     postdec1        equ	4069
    84   000FDD                     postdec2        equ	4061
    85   000FEE                     postinc0        equ	4078
    86   000FE6                     postinc1        equ	4070
    87   000FDE                     postinc2        equ	4062
    88   000FEC                     preinc0         equ	4076
    89   000FE4                     preinc1         equ	4068
    90   000FDC                     preinc2         equ	4060
    91   000FF3                     prod            equ	4083
    92   000FF4                     prodh           equ	4084
    93   000FF3                     prodl           equ	4083
    94   000FD8                     status          equ	4056
    95   000FF5                     tablat          equ	4085
    96   000FF6                     tblptr          equ	4086
    97   000FF7                     tblptrh         equ	4087
    98   000FF6                     tblptrl         equ	4086
    99   000FF8                     tblptru         equ	4088
   100   000FFD                     tosl            equ	4093
   101   000FE8                     wreg            equ	4072
   102   000F80                     PORTA           equ	3968	;# 
   103   000F81                     PORTB           equ	3969	;# 
   104   000F82                     PORTC           equ	3970	;# 
   105   000F83                     PORTD           equ	3971	;# 
   106   000F84                     PORTE           equ	3972	;# 
   107   000F89                     LATA            equ	3977	;# 
   108   000F8A                     LATB            equ	3978	;# 
   109   000F8B                     LATC            equ	3979	;# 
   110   000F8C                     LATD            equ	3980	;# 
   111   000F8D                     LATE            equ	3981	;# 
   112   000F92                     TRISA           equ	3986	;# 
   113   000F92                     DDRA            equ	3986	;# 
   114   000F93                     TRISB           equ	3987	;# 
   115   000F93                     DDRB            equ	3987	;# 
   116   000F94                     TRISC           equ	3988	;# 
   117   000F94                     DDRC            equ	3988	;# 
   118   000F95                     TRISD           equ	3989	;# 
   119   000F95                     DDRD            equ	3989	;# 
   120   000F96                     TRISE           equ	3990	;# 
   121   000F96                     DDRE            equ	3990	;# 
   122   000F9B                     OSCTUNE         equ	3995	;# 
   123   000F9D                     PIE1            equ	3997	;# 
   124   000F9E                     PIR1            equ	3998	;# 
   125   000F9F                     IPR1            equ	3999	;# 
   126   000FA0                     PIE2            equ	4000	;# 
   127   000FA1                     PIR2            equ	4001	;# 
   128   000FA2                     IPR2            equ	4002	;# 
   129   000FA6                     EECON1          equ	4006	;# 
   130   000FA7                     EECON2          equ	4007	;# 
   131   000FA8                     EEDATA          equ	4008	;# 
   132   000FA9                     EEADR           equ	4009	;# 
   133   000FAB                     RCSTA           equ	4011	;# 
   134   000FAB                     RCSTA1          equ	4011	;# 
   135   000FAC                     TXSTA           equ	4012	;# 
   136   000FAC                     TXSTA1          equ	4012	;# 
   137   000FAD                     TXREG           equ	4013	;# 
   138   000FAD                     TXREG1          equ	4013	;# 
   139   000FAE                     RCREG           equ	4014	;# 
   140   000FAE                     RCREG1          equ	4014	;# 
   141   000FAF                     SPBRG           equ	4015	;# 
   142   000FAF                     SPBRG1          equ	4015	;# 
   143   000FB0                     SPBRGH          equ	4016	;# 
   144   000FB1                     T3CON           equ	4017	;# 
   145   000FB2                     TMR3            equ	4018	;# 
   146   000FB2                     TMR3L           equ	4018	;# 
   147   000FB3                     TMR3H           equ	4019	;# 
   148   000FB4                     CMCON           equ	4020	;# 
   149   000FB5                     CVRCON          equ	4021	;# 
   150   000FB6                     ECCP1AS         equ	4022	;# 
   151   000FB7                     ECCP1DEL        equ	4023	;# 
   152   000FB7                     PWM1CON         equ	4023	;# 
   153   000FB8                     BAUDCON         equ	4024	;# 
   154   000FB8                     BAUDCTL         equ	4024	;# 
   155   000FBA                     CCP2CON         equ	4026	;# 
   156   000FBB                     CCPR2           equ	4027	;# 
   157   000FBB                     CCPR2L          equ	4027	;# 
   158   000FBC                     CCPR2H          equ	4028	;# 
   159   000FBD                     CCP1CON         equ	4029	;# 
   160   000FBD                     ECCP1CON        equ	4029	;# 
   161   000FBE                     CCPR1           equ	4030	;# 
   162   000FBE                     CCPR1L          equ	4030	;# 
   163   000FBF                     CCPR1H          equ	4031	;# 
   164   000FC0                     ADCON2          equ	4032	;# 
   165   000FC1                     ADCON1          equ	4033	;# 
   166   000FC2                     ADCON0          equ	4034	;# 
   167   000FC3                     ADRES           equ	4035	;# 
   168   000FC3                     ADRESL          equ	4035	;# 
   169   000FC4                     ADRESH          equ	4036	;# 
   170   000FC5                     SSPCON2         equ	4037	;# 
   171   000FC6                     SSPCON1         equ	4038	;# 
   172   000FC7                     SSPSTAT         equ	4039	;# 
   173   000FC8                     SSPADD          equ	4040	;# 
   174   000FC9                     SSPBUF          equ	4041	;# 
   175   000FCA                     T2CON           equ	4042	;# 
   176   000FCB                     PR2             equ	4043	;# 
   177   000FCB                     MEMCON          equ	4043	;# 
   178   000FCC                     TMR2            equ	4044	;# 
   179   000FCD                     T1CON           equ	4045	;# 
   180   000FCE                     TMR1            equ	4046	;# 
   181   000FCE                     TMR1L           equ	4046	;# 
   182   000FCF                     TMR1H           equ	4047	;# 
   183   000FD0                     RCON            equ	4048	;# 
   184   000FD1                     WDTCON          equ	4049	;# 
   185   000FD2                     HLVDCON         equ	4050	;# 
   186   000FD2                     LVDCON          equ	4050	;# 
   187   000FD3                     OSCCON          equ	4051	;# 
   188   000FD5                     T0CON           equ	4053	;# 
   189   000FD6                     TMR0            equ	4054	;# 
   190   000FD6                     TMR0L           equ	4054	;# 
   191   000FD7                     TMR0H           equ	4055	;# 
   192   000FD8                     STATUS          equ	4056	;# 
   193   000FD9                     FSR2            equ	4057	;# 
   194   000FD9                     FSR2L           equ	4057	;# 
   195   000FDA                     FSR2H           equ	4058	;# 
   196   000FDB                     PLUSW2          equ	4059	;# 
   197   000FDC                     PREINC2         equ	4060	;# 
   198   000FDD                     POSTDEC2        equ	4061	;# 
   199   000FDE                     POSTINC2        equ	4062	;# 
   200   000FDF                     INDF2           equ	4063	;# 
   201   000FE0                     BSR             equ	4064	;# 
   202   000FE1                     FSR1            equ	4065	;# 
   203   000FE1                     FSR1L           equ	4065	;# 
   204   000FE2                     FSR1H           equ	4066	;# 
   205   000FE3                     PLUSW1          equ	4067	;# 
   206   000FE4                     PREINC1         equ	4068	;# 
   207   000FE5                     POSTDEC1        equ	4069	;# 
   208   000FE6                     POSTINC1        equ	4070	;# 
   209   000FE7                     INDF1           equ	4071	;# 
   210   000FE8                     WREG            equ	4072	;# 
   211   000FE9                     FSR0            equ	4073	;# 
   212   000FE9                     FSR0L           equ	4073	;# 
   213   000FEA                     FSR0H           equ	4074	;# 
   214   000FEB                     PLUSW0          equ	4075	;# 
   215   000FEC                     PREINC0         equ	4076	;# 
   216   000FED                     POSTDEC0        equ	4077	;# 
   217   000FEE                     POSTINC0        equ	4078	;# 
   218   000FEF                     INDF0           equ	4079	;# 
   219   000FF0                     INTCON3         equ	4080	;# 
   220   000FF1                     INTCON2         equ	4081	;# 
   221   000FF2                     INTCON          equ	4082	;# 
   222   000FF3                     PROD            equ	4083	;# 
   223   000FF3                     PRODL           equ	4083	;# 
   224   000FF4                     PRODH           equ	4084	;# 
   225   000FF5                     TABLAT          equ	4085	;# 
   226   000FF6                     TBLPTR          equ	4086	;# 
   227   000FF6                     TBLPTRL         equ	4086	;# 
   228   000FF7                     TBLPTRH         equ	4087	;# 
   229   000FF8                     TBLPTRU         equ	4088	;# 
   230   000FF9                     PCLAT           equ	4089	;# 
   231   000FF9                     PC              equ	4089	;# 
   232   000FF9                     PCL             equ	4089	;# 
   233   000FFA                     PCLATH          equ	4090	;# 
   234   000FFB                     PCLATU          equ	4091	;# 
   235   000FFC                     STKPTR          equ	4092	;# 
   236   000FFD                     TOS             equ	4093	;# 
   237   000FFD                     TOSL            equ	4093	;# 
   238   000FFE                     TOSH            equ	4094	;# 
   239   000FFF                     TOSU            equ	4095	;# 
   240   000FC3                     _ADRESL         set	4035
   241   000FC4                     _ADRESH         set	4036
   242   000FC2                     _ADCON0bits     set	4034
   243   000FC0                     _ADCON2bits     set	4032
   244   000F93                     _TRISBbits      set	3987
   245   000FC1                     _ADCON1         set	4033
   246   000FD3                     _OSCCONbits     set	4051
   247   000FAE                     _RCREG          set	4014
   248   000F9E                     _PIR1bits       set	3998
   249   000FAD                     _TXREG          set	4013
   250   000FAB                     _RCSTAbits      set	4011
   251   000F94                     _TRISCbits      set	3988
   252   000FAC                     _TXSTAbits      set	4012
   253   000FAF                     _SPBRG          set	4015
   254                           
   255                           	psect	smallconst
   256   000200                     __psmallconst:
   257                           	callstack 0
   258   000200  00                 	db	0
   259   000201                     STR_2:
   260   000201  55                 	db	85	;'U'
   261   000202  41                 	db	65	;'A'
   262   000203  52                 	db	82	;'R'
   263   000204  54                 	db	84	;'T'
   264   000205  20                 	db	32
   265   000206  49                 	db	73	;'I'
   266   000207  6E                 	db	110	;'n'
   267   000208  69                 	db	105	;'i'
   268   000209  74                 	db	116	;'t'
   269   00020A  69                 	db	105	;'i'
   270   00020B  61                 	db	97	;'a'
   271   00020C  6C                 	db	108	;'l'
   272   00020D  69                 	db	105	;'i'
   273   00020E  7A                 	db	122	;'z'
   274   00020F  65                 	db	101	;'e'
   275   000210  64                 	db	100	;'d'
   276   000211  0D                 	db	13
   277   000212  0A                 	db	10
   278   000213  00                 	db	0
   279   000214                     STR_1:
   280   000214  25                 	db	37
   281   000215  64                 	db	100	;'d'
   282   000216  00                 	db	0
   283   000211                     STR_3           equ	STR_2+16
   284   000217  00                 	db	0	; dummy byte at the end
   285   000002                     __activetblptr  equ	2
   286                           
   287                           ; #config settings
   288                           
   289                           	psect	cinit
   290   0008E0                     __pcinit:
   291                           	callstack 0
   292   0008E0                     start_initialization:
   293                           	callstack 0
   294   0008E0                     __initialization:
   295                           	callstack 0
   296                           
   297                           ; Clear objects allocated to COMRAM (37 bytes)
   298   0008E0  EE00  F04C         	lfsr	0,__pbssCOMRAM
   299   0008E4  0E25               	movlw	37
   300   0008E6                     clear_0:
   301   0008E6  6AEE               	clrf	postinc0,c
   302   0008E8  06E8               	decf	wreg,f,c
   303   0008EA  E1FD               	bnz	clear_0
   304   0008EC                     end_of_initialization:
   305                           	callstack 0
   306   0008EC                     __end_of__initialization:
   307                           	callstack 0
   308   0008EC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   309   0008EE  6EF8               	movwf	tblptru,c
   310   0008F0  0100               	movlb	0
   311   0008F2  EFE8  F001         	goto	_main	;jump to C main() function
   312                           
   313                           	psect	bssCOMRAM
   314   00004C                     __pbssCOMRAM:
   315                           	callstack 0
   316   00004C                     _dbuf:
   317                           	callstack 0
   318   00004C                     	ds	32
   319   00006C                     _width:
   320                           	callstack 0
   321   00006C                     	ds	2
   322   00006E                     _prec:
   323                           	callstack 0
   324   00006E                     	ds	2
   325   000070                     _flags:
   326                           	callstack 0
   327   000070                     	ds	1
   328                           
   329                           	psect	cstackCOMRAM
   330   000001                     __pcstackCOMRAM:
   331                           	callstack 0
   332   000001                     ?___awdiv:
   333                           	callstack 0
   334   000001                     ?___awmod:
   335                           	callstack 0
   336   000001                     ?___lldiv:
   337                           	callstack 0
   338   000001                     UART_Write@data:
   339                           	callstack 0
   340   000001                     ___awdiv@dividend:
   341                           	callstack 0
   342   000001                     ___awmod@dividend:
   343                           	callstack 0
   344   000001                     fputc@c:
   345                           	callstack 0
   346   000001                     UART_Init@baud_rate:
   347                           	callstack 0
   348   000001                     ___lldiv@dividend:
   349                           	callstack 0
   350   000001                     
   351                           ; 1 bytes @ 0x0
   352   000001                     	ds	1
   353   000002                     UART_Write_String@text:
   354                           	callstack 0
   355                           
   356                           ; 2 bytes @ 0x1
   357   000002                     	ds	1
   358   000003                     fputc@fp:
   359                           	callstack 0
   360   000003                     ___awdiv@divisor:
   361                           	callstack 0
   362   000003                     ___awmod@divisor:
   363                           	callstack 0
   364                           
   365                           ; 2 bytes @ 0x2
   366   000003                     	ds	1
   367   000004                     ??_fputc:
   368   000004                     
   369                           ; 1 bytes @ 0x3
   370   000004                     	ds	1
   371   000005                     ___awdiv@counter:
   372                           	callstack 0
   373   000005                     ___awmod@counter:
   374                           	callstack 0
   375   000005                     ___lldiv@divisor:
   376                           	callstack 0
   377   000005                     
   378                           ; 1 bytes @ 0x4
   379   000005                     	ds	1
   380   000006                     ___awdiv@sign:
   381                           	callstack 0
   382   000006                     ___awmod@sign:
   383                           	callstack 0
   384                           
   385                           ; 1 bytes @ 0x5
   386   000006                     	ds	1
   387   000007                     ?_abs:
   388                           	callstack 0
   389   000007                     ___awdiv@quotient:
   390                           	callstack 0
   391   000007                     abs@a:
   392                           	callstack 0
   393                           
   394                           ; 2 bytes @ 0x6
   395   000007                     	ds	2
   396   000009                     ___lldiv@quotient:
   397                           	callstack 0
   398   000009                     ??_abs:
   399   000009                     
   400                           ; 1 bytes @ 0x8
   401   000009                     	ds	2
   402   00000B                     vfpfcnvrt@fp:
   403                           	callstack 0
   404                           
   405                           ; 1 bytes @ 0xA
   406   00000B                     	ds	1
   407   00000C                     vfpfcnvrt@fmt:
   408                           	callstack 0
   409                           
   410                           ; 1 bytes @ 0xB
   411   00000C                     	ds	1
   412   00000D                     ___lldiv@counter:
   413                           	callstack 0
   414   00000D                     vfpfcnvrt@ap:
   415                           	callstack 0
   416                           
   417                           ; 1 bytes @ 0xC
   418   00000D                     	ds	1
   419   00000E                     ??_vfpfcnvrt:
   420                           
   421                           ; 1 bytes @ 0xD
   422   00000E                     	ds	1
   423   00000F                     vfpfcnvrt@done:
   424                           	callstack 0
   425                           
   426                           ; 1 bytes @ 0xE
   427   00000F                     	ds	1
   428   000010                     vfpfcnvrt@cp:
   429                           	callstack 0
   430                           
   431                           ; 1 bytes @ 0xF
   432   000010                     	ds	1
   433   000011                     vfpfcnvrt@convarg:
   434                           	callstack 0
   435                           
   436                           ; 4 bytes @ 0x10
   437   000011                     	ds	4
   438   000015                     vfpfcnvrt@c:
   439                           	callstack 0
   440                           
   441                           ; 1 bytes @ 0x14
   442   000015                     	ds	1
   443   000016                     ?_vfprintf:
   444                           	callstack 0
   445   000016                     vfprintf@fp:
   446                           	callstack 0
   447                           
   448                           ; 1 bytes @ 0x15
   449   000016                     	ds	1
   450   000017                     vfprintf@fmt:
   451                           	callstack 0
   452                           
   453                           ; 1 bytes @ 0x16
   454   000017                     	ds	1
   455   000018                     vfprintf@ap:
   456                           	callstack 0
   457                           
   458                           ; 1 bytes @ 0x17
   459   000018                     	ds	1
   460   000019                     vfprintf@cfmt:
   461                           	callstack 0
   462   000019                     
   463                           ; 1 bytes @ 0x18
   464   000019                     	ds	1
   465   00001A                     ?_sprintf:
   466                           	callstack 0
   467   00001A                     sprintf@s:
   468                           	callstack 0
   469                           
   470                           ; 1 bytes @ 0x19
   471   00001A                     	ds	1
   472   00001B                     sprintf@fmt:
   473                           	callstack 0
   474                           
   475                           ; 1 bytes @ 0x1A
   476   00001B                     	ds	3
   477   00001E                     sprintf@ap:
   478                           	callstack 0
   479   00001E                     
   480                           ; 1 bytes @ 0x1D
   481   00001E                     	ds	1
   482   00001F                     sprintf@f:
   483                           	callstack 0
   484                           
   485                           ; 11 bytes @ 0x1E
   486   00001F                     	ds	11
   487   00002A                     UART_Write_Int@value:
   488                           	callstack 0
   489                           
   490                           ; 2 bytes @ 0x29
   491   00002A                     	ds	2
   492   00002C                     UART_Write_Int@buffer:
   493                           	callstack 0
   494   00002C                     
   495                           ; 1 bytes @ 0x2B
   496   00002C                     	ds	20
   497   000040                     ??_main:
   498                           
   499                           ; 1 bytes @ 0x3F
   500   000040                     	ds	4
   501   000044                     main@num:
   502                           	callstack 0
   503                           
   504                           ; 2 bytes @ 0x43
   505   000044                     	ds	2
   506   000046                     main@sum:
   507                           	callstack 0
   508                           
   509                           ; 4 bytes @ 0x45
   510   000046                     	ds	4
   511   00004A                     main@i:
   512                           	callstack 0
   513                           
   514                           ; 2 bytes @ 0x49
   515   00004A                     	ds	2
   516                           
   517 ;;
   518 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   519 ;;
   520 ;; *************** function _main *****************
   521 ;; Defined at:
   522 ;;		line 48 in file "main.c"
   523 ;; Parameters:    Size  Location     Type
   524 ;;		None
   525 ;; Auto vars:     Size  Location     Type
   526 ;;  num             2   67[COMRAM] int 
   527 ;;  i               2   73[COMRAM] unsigned int 
   528 ;;  sum             4   69[COMRAM] unsigned long 
   529 ;; Return value:  Size  Location     Type
   530 ;;                  1    wreg      void 
   531 ;; Registers used:
   532 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   533 ;; Tracked objects:
   534 ;;		On entry : 0/0
   535 ;;		On exit  : 0/0
   536 ;;		Unchanged: 0/0
   537 ;; Data sizes:     COMRAM   BANK0   BANK1
   538 ;;      Params:         0       0       0
   539 ;;      Locals:         8       0       0
   540 ;;      Temps:          4       0       0
   541 ;;      Totals:        12       0       0
   542 ;;Total ram usage:       12 bytes
   543 ;; Hardware stack levels required when called: 6
   544 ;; This function calls:
   545 ;;		_UART_Init
   546 ;;		_UART_Write_Int
   547 ;;		_UART_Write_String
   548 ;;		___lldiv
   549 ;; This function is called by:
   550 ;;		Startup code after reset
   551 ;; This function uses a non-reentrant model
   552 ;;
   553                           
   554                           	psect	text0
   555   0003D0                     __ptext0:
   556                           	callstack 0
   557   0003D0                     _main:
   558                           	callstack 25
   559   0003D0                     
   560                           ;main.c: 50:     OSCCONbits.IRCF = 0b111;
   561   0003D0  0E70               	movlw	112
   562   0003D2  12D3               	iorwf	211,f,c	;volatile
   563   0003D4                     
   564                           ;main.c: 51:     UART_Init(9600);
   565   0003D4  0E80               	movlw	128
   566   0003D6  6E01               	movwf	UART_Init@baud_rate^0,c
   567   0003D8  0E25               	movlw	37
   568   0003DA  6E02               	movwf	(UART_Init@baud_rate+1)^0,c
   569   0003DC  0E00               	movlw	0
   570   0003DE  6E03               	movwf	(UART_Init@baud_rate+2)^0,c
   571   0003E0  0E00               	movlw	0
   572   0003E2  6E04               	movwf	(UART_Init@baud_rate+3)^0,c
   573   0003E4  EC86  F004         	call	_UART_Init	;wreg free
   574   0003E8                     
   575                           ;main.c: 52:     _delay((unsigned long)((1000)*(8000000/4000.0)));
   576   0003E8  0E0B               	movlw	11
   577   0003EA  6E41               	movwf	(??_main+1)^0,c
   578   0003EC  0E26               	movlw	38
   579   0003EE  6E40               	movwf	??_main^0,c
   580   0003F0  0E5E               	movlw	94
   581   0003F2                     u757:
   582   0003F2  2EE8               	decfsz	wreg,f,c
   583   0003F4  D7FE               	bra	u757
   584   0003F6  2E40               	decfsz	??_main^0,f,c
   585   0003F8  D7FC               	bra	u757
   586   0003FA  2E41               	decfsz	(??_main+1)^0,f,c
   587   0003FC  D7FA               	bra	u757
   588   0003FE                     
   589                           ;main.c: 53:     UART_Write_String("UART Initialized\r\n");
   590   0003FE  0E01               	movlw	low STR_2
   591   000400  6E02               	movwf	UART_Write_String@text^0,c
   592   000402  5002               	movf	UART_Write_String@text^0,w,c
   593   000404  A4D8               	btfss	status,2,c
   594   000406  0E02               	movlw	high __smallconst
   595   000408  6E03               	movwf	(UART_Write_String@text+1)^0,c
   596   00040A  ECDE  F003         	call	_UART_Write_String	;wreg free
   597   00040E                     
   598                           ;main.c: 57:     ADCON1 = 0x06;
   599   00040E  0E06               	movlw	6
   600   000410  6EC1               	movwf	193,c	;volatile
   601   000412                     
   602                           ;main.c: 59:     TRISBbits.RB2 = 1;
   603   000412  8493               	bsf	147,2,c	;volatile
   604   000414                     
   605                           ;main.c: 61:     ADCON2bits.ADCS = 0;
   606   000414  0EF8               	movlw	-8
   607   000416  16C0               	andwf	192,f,c	;volatile
   608   000418                     
   609                           ;main.c: 62:     ADCON2bits.ACQT = 1;
   610   000418  50C0               	movf	192,w,c	;volatile
   611   00041A  0BC7               	andlw	-57
   612   00041C  0908               	iorlw	8
   613   00041E  6EC0               	movwf	192,c	;volatile
   614   000420                     
   615                           ;main.c: 63:     ADCON2bits.ADFM = 1;
   616   000420  8EC0               	bsf	192,7,c	;volatile
   617   000422                     
   618                           ;main.c: 65:     ADCON0bits.CHS = 0b1000;
   619   000422  50C2               	movf	194,w,c	;volatile
   620   000424  0BC3               	andlw	-61
   621   000426  0920               	iorlw	32
   622   000428  6EC2               	movwf	194,c	;volatile
   623   00042A                     
   624                           ;main.c: 67:     ADCON0bits.ADON =1;
   625   00042A  80C2               	bsf	194,0,c	;volatile
   626   00042C                     l1336:
   627                           
   628                           ;main.c: 70:     {;main.c: 76:         unsigned long sum = 0;
   629   00042C  0E00               	movlw	0
   630   00042E  6E46               	movwf	main@sum^0,c
   631   000430  0E00               	movlw	0
   632   000432  6E47               	movwf	(main@sum+1)^0,c
   633   000434  0E00               	movlw	0
   634   000436  6E48               	movwf	(main@sum+2)^0,c
   635   000438  0E00               	movlw	0
   636   00043A  6E49               	movwf	(main@sum+3)^0,c
   637   00043C                     
   638                           ;main.c: 77:         for (unsigned int i = 0; i < 100; i++)
   639   00043C  0E00               	movlw	0
   640   00043E  6E4B               	movwf	(main@i+1)^0,c
   641   000440  0E00               	movlw	0
   642   000442  6E4A               	movwf	main@i^0,c
   643   000444                     l62:
   644                           
   645                           ;main.c: 78: {;main.c: 79:             ADCON0bits.GO = 1;
   646   000444  82C2               	bsf	194,1,c	;volatile
   647   000446                     l64:
   648   000446  B2C2               	btfsc	194,1,c	;volatile
   649   000448  EF28  F002         	goto	u731
   650   00044C  EF2A  F002         	goto	u730
   651   000450                     u731:
   652   000450  EF23  F002         	goto	l64
   653   000454                     u730:
   654   000454                     
   655                           ;main.c: 81:             int num;;main.c: 82:             num = ADRESH << 8 | ADRESL;
   656   000454  50C3               	movf	195,w,c	;volatile
   657   000456  CFC4 F040          	movff	4036,??_main	;volatile
   658   00045A  6A41               	clrf	(??_main+1)^0,c
   659   00045C  C040  F041         	movff	??_main,??_main+1
   660   000460  6A40               	clrf	??_main^0,c
   661   000462  1040               	iorwf	??_main^0,w,c
   662   000464  6E44               	movwf	main@num^0,c
   663   000466  5041               	movf	(??_main+1)^0,w,c
   664   000468  6E45               	movwf	(main@num+1)^0,c
   665                           
   666                           ;main.c: 83:             sum += num;
   667   00046A  C044  F040         	movff	main@num,??_main
   668   00046E  C045  F041         	movff	main@num+1,??_main+1
   669   000472  0E00               	movlw	0
   670   000474  BE41               	btfsc	(??_main+1)^0,7,c
   671   000476  0EFF               	movlw	255
   672   000478  6E42               	movwf	(??_main+2)^0,c
   673   00047A  6E43               	movwf	(??_main+3)^0,c
   674   00047C  5040               	movf	??_main^0,w,c
   675   00047E  2646               	addwf	main@sum^0,f,c
   676   000480  5041               	movf	(??_main+1)^0,w,c
   677   000482  2247               	addwfc	(main@sum+1)^0,f,c
   678   000484  5042               	movf	(??_main+2)^0,w,c
   679   000486  2248               	addwfc	(main@sum+2)^0,f,c
   680   000488  5043               	movf	(??_main+3)^0,w,c
   681   00048A  2249               	addwfc	(main@sum+3)^0,f,c
   682   00048C                     
   683                           ;main.c: 85:         }
   684   00048C  4A4A               	infsnz	main@i^0,f,c
   685   00048E  2A4B               	incf	(main@i+1)^0,f,c
   686   000490  504B               	movf	(main@i+1)^0,w,c
   687   000492  E109               	bnz	u740
   688   000494  0E64               	movlw	100
   689   000496  5C4A               	subwf	main@i^0,w,c
   690   000498  A0D8               	btfss	status,0,c
   691   00049A  EF51  F002         	goto	u741
   692   00049E  EF53  F002         	goto	u740
   693   0004A2                     u741:
   694   0004A2  EF22  F002         	goto	l62
   695   0004A6                     u740:
   696   0004A6                     
   697                           ;main.c: 87:         UART_Write_Int(sum/100 );
   698   0004A6  C046  F001         	movff	main@sum,___lldiv@dividend
   699   0004AA  C047  F002         	movff	main@sum+1,___lldiv@dividend+1
   700   0004AE  C048  F003         	movff	main@sum+2,___lldiv@dividend+2
   701   0004B2  C049  F004         	movff	main@sum+3,___lldiv@dividend+3
   702   0004B6  0E64               	movlw	100
   703   0004B8  6E05               	movwf	___lldiv@divisor^0,c
   704   0004BA  0E00               	movlw	0
   705   0004BC  6E06               	movwf	(___lldiv@divisor+1)^0,c
   706   0004BE  0E00               	movlw	0
   707   0004C0  6E07               	movwf	(___lldiv@divisor+2)^0,c
   708   0004C2  0E00               	movlw	0
   709   0004C4  6E08               	movwf	(___lldiv@divisor+3)^0,c
   710   0004C6  EC8C  F003         	call	___lldiv	;wreg free
   711   0004CA  C001  F02A         	movff	?___lldiv,UART_Write_Int@value
   712   0004CE  C002  F02B         	movff	?___lldiv+1,UART_Write_Int@value+1
   713   0004D2  EC60  F004         	call	_UART_Write_Int	;wreg free
   714   0004D6                     
   715                           ;main.c: 88:         UART_Write_String("\r\n");
   716   0004D6  0E11               	movlw	low (STR_2+16)
   717   0004D8  6E02               	movwf	UART_Write_String@text^0,c
   718   0004DA  5002               	movf	UART_Write_String@text^0,w,c
   719   0004DC  A4D8               	btfss	status,2,c
   720   0004DE  0E02               	movlw	high __smallconst
   721   0004E0  6E03               	movwf	(UART_Write_String@text+1)^0,c
   722   0004E2  ECDE  F003         	call	_UART_Write_String	;wreg free
   723   0004E6                     
   724                           ;main.c: 89:         _delay((unsigned long)((10)*(8000000/4000.0)));
   725   0004E6  0E1A               	movlw	26
   726   0004E8  6E40               	movwf	??_main^0,c
   727   0004EA  0EF8               	movlw	248
   728   0004EC                     u767:
   729   0004EC  2EE8               	decfsz	wreg,f,c
   730   0004EE  D7FE               	bra	u767
   731   0004F0  2E40               	decfsz	??_main^0,f,c
   732   0004F2  D7FC               	bra	u767
   733   0004F4  D000               	nop2	
   734   0004F6  EF16  F002         	goto	l1336
   735   0004FA  EF00  F000         	goto	start
   736   0004FE                     __end_of_main:
   737                           	callstack 0
   738                           
   739 ;; *************** function ___lldiv *****************
   740 ;; Defined at:
   741 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\__lldiv.c"
   742 ;; Parameters:    Size  Location     Type
   743 ;;  dividend        4    0[COMRAM] unsigned long 
   744 ;;  divisor         4    4[COMRAM] unsigned long 
   745 ;; Auto vars:     Size  Location     Type
   746 ;;  quotient        4    8[COMRAM] unsigned long 
   747 ;;  counter         1   12[COMRAM] unsigned char 
   748 ;; Return value:  Size  Location     Type
   749 ;;                  4    0[COMRAM] unsigned long 
   750 ;; Registers used:
   751 ;;		wreg, status,2, status,0
   752 ;; Tracked objects:
   753 ;;		On entry : 0/0
   754 ;;		On exit  : 0/0
   755 ;;		Unchanged: 0/0
   756 ;; Data sizes:     COMRAM   BANK0   BANK1
   757 ;;      Params:         8       0       0
   758 ;;      Locals:         5       0       0
   759 ;;      Temps:          0       0       0
   760 ;;      Totals:        13       0       0
   761 ;;Total ram usage:       13 bytes
   762 ;; Hardware stack levels used: 1
   763 ;; This function calls:
   764 ;;		Nothing
   765 ;; This function is called by:
   766 ;;		_main
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           	psect	text1
   771   000718                     __ptext1:
   772                           	callstack 0
   773   000718                     ___lldiv:
   774                           	callstack 30
   775   000718  0E00               	movlw	0
   776   00071A  6E09               	movwf	___lldiv@quotient^0,c
   777   00071C  0E00               	movlw	0
   778   00071E  6E0A               	movwf	(___lldiv@quotient+1)^0,c
   779   000720  0E00               	movlw	0
   780   000722  6E0B               	movwf	(___lldiv@quotient+2)^0,c
   781   000724  0E00               	movlw	0
   782   000726  6E0C               	movwf	(___lldiv@quotient+3)^0,c
   783   000728  5005               	movf	___lldiv@divisor^0,w,c
   784   00072A  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
   785   00072C  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
   786   00072E  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
   787   000730  B4D8               	btfsc	status,2,c
   788   000732  EF9D  F003         	goto	u701
   789   000736  EF9F  F003         	goto	u700
   790   00073A                     u701:
   791   00073A  EFD5  F003         	goto	l99
   792   00073E                     u700:
   793   00073E  0E01               	movlw	1
   794   000740  6E0D               	movwf	___lldiv@counter^0,c
   795   000742  EFA9  F003         	goto	l1300
   796   000746                     l1298:
   797   000746  90D8               	bcf	status,0,c
   798   000748  3605               	rlcf	___lldiv@divisor^0,f,c
   799   00074A  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
   800   00074C  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
   801   00074E  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
   802   000750  2A0D               	incf	___lldiv@counter^0,f,c
   803   000752                     l1300:
   804   000752  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
   805   000754  EFAE  F003         	goto	u711
   806   000758  EFB0  F003         	goto	u710
   807   00075C                     u711:
   808   00075C  EFA3  F003         	goto	l1298
   809   000760                     u710:
   810   000760                     l1302:
   811   000760  90D8               	bcf	status,0,c
   812   000762  3609               	rlcf	___lldiv@quotient^0,f,c
   813   000764  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
   814   000766  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
   815   000768  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
   816   00076A  5005               	movf	___lldiv@divisor^0,w,c
   817   00076C  5C01               	subwf	___lldiv@dividend^0,w,c
   818   00076E  5006               	movf	(___lldiv@divisor+1)^0,w,c
   819   000770  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
   820   000772  5007               	movf	(___lldiv@divisor+2)^0,w,c
   821   000774  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
   822   000776  5008               	movf	(___lldiv@divisor+3)^0,w,c
   823   000778  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
   824   00077A  A0D8               	btfss	status,0,c
   825   00077C  EFC2  F003         	goto	u721
   826   000780  EFC4  F003         	goto	u720
   827   000784                     u721:
   828   000784  EFCD  F003         	goto	l1310
   829   000788                     u720:
   830   000788  5005               	movf	___lldiv@divisor^0,w,c
   831   00078A  5E01               	subwf	___lldiv@dividend^0,f,c
   832   00078C  5006               	movf	(___lldiv@divisor+1)^0,w,c
   833   00078E  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
   834   000790  5007               	movf	(___lldiv@divisor+2)^0,w,c
   835   000792  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
   836   000794  5008               	movf	(___lldiv@divisor+3)^0,w,c
   837   000796  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
   838   000798  8009               	bsf	___lldiv@quotient^0,0,c
   839   00079A                     l1310:
   840   00079A  90D8               	bcf	status,0,c
   841   00079C  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
   842   00079E  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
   843   0007A0  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
   844   0007A2  3205               	rrcf	___lldiv@divisor^0,f,c
   845   0007A4  2E0D               	decfsz	___lldiv@counter^0,f,c
   846   0007A6  EFB0  F003         	goto	l1302
   847   0007AA                     l99:
   848   0007AA  C009  F001         	movff	___lldiv@quotient,?___lldiv
   849   0007AE  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
   850   0007B2  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
   851   0007B6  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
   852   0007BA  0012               	return		;funcret
   853   0007BC                     __end_of___lldiv:
   854                           	callstack 0
   855                           
   856 ;; *************** function _UART_Write_Int *****************
   857 ;; Defined at:
   858 ;;		line 33 in file "main.c"
   859 ;; Parameters:    Size  Location     Type
   860 ;;  value           2   41[COMRAM] int 
   861 ;; Auto vars:     Size  Location     Type
   862 ;;  buffer         20   43[COMRAM] unsigned char [20]
   863 ;; Return value:  Size  Location     Type
   864 ;;                  1    wreg      void 
   865 ;; Registers used:
   866 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   867 ;; Tracked objects:
   868 ;;		On entry : 0/0
   869 ;;		On exit  : 0/0
   870 ;;		Unchanged: 0/0
   871 ;; Data sizes:     COMRAM   BANK0   BANK1
   872 ;;      Params:         2       0       0
   873 ;;      Locals:        20       0       0
   874 ;;      Temps:          0       0       0
   875 ;;      Totals:        22       0       0
   876 ;;Total ram usage:       22 bytes
   877 ;; Hardware stack levels used: 1
   878 ;; Hardware stack levels required when called: 5
   879 ;; This function calls:
   880 ;;		_UART_Write_String
   881 ;;		_sprintf
   882 ;; This function is called by:
   883 ;;		_main
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           	psect	text2
   888   0008C0                     __ptext2:
   889                           	callstack 0
   890   0008C0                     _UART_Write_Int:
   891                           	callstack 25
   892   0008C0                     
   893                           ;main.c: 34:     char buffer[20];;main.c: 35:     sprintf(buffer, "%d", value);
   894   0008C0  0E2C               	movlw	low UART_Write_Int@buffer
   895   0008C2  6E1A               	movwf	sprintf@s^0,c
   896   0008C4  0E14               	movlw	low STR_1
   897   0008C6  6E1B               	movwf	sprintf@fmt^0,c
   898   0008C8  C02A  F01C         	movff	UART_Write_Int@value,?_sprintf+2
   899   0008CC  C02B  F01D         	movff	UART_Write_Int@value+1,?_sprintf+3
   900   0008D0  EC2C  F004         	call	_sprintf	;wreg free
   901   0008D4                     
   902                           ;main.c: 36:     UART_Write_String(buffer);
   903   0008D4  0E2C               	movlw	low UART_Write_Int@buffer
   904   0008D6  6E02               	movwf	UART_Write_String@text^0,c
   905   0008D8  6A03               	clrf	(UART_Write_String@text+1)^0,c
   906   0008DA  ECDE  F003         	call	_UART_Write_String	;wreg free
   907   0008DE  0012               	return		;funcret
   908   0008E0                     __end_of_UART_Write_Int:
   909                           	callstack 0
   910                           
   911 ;; *************** function _sprintf *****************
   912 ;; Defined at:
   913 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_sprintf.c"
   914 ;; Parameters:    Size  Location     Type
   915 ;;  s               1   25[COMRAM] PTR unsigned char 
   916 ;;		 -> UART_Write_Int@buffer(20), 
   917 ;;  fmt             1   26[COMRAM] PTR const unsigned char 
   918 ;;		 -> STR_1(3), 
   919 ;; Auto vars:     Size  Location     Type
   920 ;;  f              11   30[COMRAM] struct _IO_FILE
   921 ;;  ret             2    0        int 
   922 ;;  ap              1   29[COMRAM] PTR void [1]
   923 ;;		 -> ?_sprintf(2), 
   924 ;; Return value:  Size  Location     Type
   925 ;;                  2   25[COMRAM] int 
   926 ;; Registers used:
   927 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   928 ;; Tracked objects:
   929 ;;		On entry : 0/0
   930 ;;		On exit  : 0/0
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMRAM   BANK0   BANK1
   933 ;;      Params:         4       0       0
   934 ;;      Locals:        12       0       0
   935 ;;      Temps:          0       0       0
   936 ;;      Totals:        16       0       0
   937 ;;Total ram usage:       16 bytes
   938 ;; Hardware stack levels used: 1
   939 ;; Hardware stack levels required when called: 4
   940 ;; This function calls:
   941 ;;		_vfprintf
   942 ;; This function is called by:
   943 ;;		_UART_Write_Int
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           	psect	text3
   948   000858                     __ptext3:
   949                           	callstack 0
   950   000858                     _sprintf:
   951                           	callstack 25
   952   000858  0E1C               	movlw	low (?_sprintf+2)
   953   00085A  6E1E               	movwf	sprintf@ap^0,c
   954   00085C  C01A  F01F         	movff	sprintf@s,sprintf@f
   955   000860  0E00               	movlw	0
   956   000862  6E22               	movwf	(sprintf@f+3)^0,c
   957   000864  0E00               	movlw	0
   958   000866  6E21               	movwf	(sprintf@f+2)^0,c
   959   000868  0E00               	movlw	0
   960   00086A  6E29               	movwf	(sprintf@f+10)^0,c
   961   00086C  0E00               	movlw	0
   962   00086E  6E28               	movwf	(sprintf@f+9)^0,c
   963   000870  0E1F               	movlw	low sprintf@f
   964   000872  6E16               	movwf	vfprintf@fp^0,c
   965   000874  C01B  F017         	movff	sprintf@fmt,vfprintf@fmt
   966   000878  0E1E               	movlw	low sprintf@ap
   967   00087A  6E18               	movwf	vfprintf@ap^0,c
   968   00087C  EC0D  F004         	call	_vfprintf	;wreg free
   969   000880  501A               	movf	sprintf@s^0,w,c
   970   000882  2421               	addwf	(sprintf@f+2)^0,w,c
   971   000884  6ED9               	movwf	fsr2l,c
   972   000886  6ADA               	clrf	fsr2h,c
   973   000888  6ADF               	clrf	indf2,c
   974   00088A  0012               	return		;funcret
   975   00088C                     __end_of_sprintf:
   976                           	callstack 0
   977                           
   978 ;; *************** function _vfprintf *****************
   979 ;; Defined at:
   980 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;  fp              1   21[COMRAM] PTR struct _IO_FILE
   983 ;;		 -> sprintf@f(11), 
   984 ;;  fmt             1   22[COMRAM] PTR const unsigned char 
   985 ;;		 -> STR_1(3), 
   986 ;;  ap              1   23[COMRAM] PTR PTR void 
   987 ;;		 -> sprintf@ap(1), 
   988 ;; Auto vars:     Size  Location     Type
   989 ;;  cfmt            1   24[COMRAM] PTR unsigned char 
   990 ;;		 -> STR_1(3), 
   991 ;; Return value:  Size  Location     Type
   992 ;;                  2   21[COMRAM] int 
   993 ;; Registers used:
   994 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   995 ;; Tracked objects:
   996 ;;		On entry : 0/0
   997 ;;		On exit  : 0/0
   998 ;;		Unchanged: 0/0
   999 ;; Data sizes:     COMRAM   BANK0   BANK1
  1000 ;;      Params:         3       0       0
  1001 ;;      Locals:         1       0       0
  1002 ;;      Temps:          0       0       0
  1003 ;;      Totals:         4       0       0
  1004 ;;Total ram usage:        4 bytes
  1005 ;; Hardware stack levels used: 1
  1006 ;; Hardware stack levels required when called: 3
  1007 ;; This function calls:
  1008 ;;		_vfpfcnvrt
  1009 ;; This function is called by:
  1010 ;;		_sprintf
  1011 ;; This function uses a non-reentrant model
  1012 ;;
  1013                           
  1014                           	psect	text4
  1015   00081A                     __ptext4:
  1016                           	callstack 0
  1017   00081A                     _vfprintf:
  1018                           	callstack 25
  1019   00081A                     
  1020                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1021   00081A  C017  F019         	movff	vfprintf@fmt,vfprintf@cfmt
  1022                           
  1023                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1024   00081E  EF19  F004         	goto	l1248
  1025   000822                     l1246:
  1026                           
  1027                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1028   000822  C016  F00B         	movff	vfprintf@fp,vfpfcnvrt@fp
  1029   000826  0E19               	movlw	low vfprintf@cfmt
  1030   000828  6E0C               	movwf	vfpfcnvrt@fmt^0,c
  1031   00082A  C018  F00D         	movff	vfprintf@ap,vfpfcnvrt@ap
  1032   00082E  EC0C  F001         	call	_vfpfcnvrt	;wreg free
  1033   000832                     l1248:
  1034                           
  1035                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1036   000832  C019  FFF6         	movff	vfprintf@cfmt,tblptrl
  1037   000836                     	if	1	;There is more than 1 active tblptr byte
  1038   000836  0E02               	movlw	high __smallconst
  1039   000838  6EF7               	movwf	tblptrh,c
  1040   00083A                     	endif
  1041   00083A                     	if	0	;tblptru may be non-zero
  1042   00083A                     	endif
  1043   00083A                     	if	0	;tblptru may be non-zero
  1044   00083A                     	endif
  1045   00083A  0008               	tblrd		*
  1046   00083C  50F5               	movf	tablat,w,c
  1047   00083E  0900               	iorlw	0
  1048   000840  A4D8               	btfss	status,2,c
  1049   000842  EF25  F004         	goto	u661
  1050   000846  EF27  F004         	goto	u660
  1051   00084A                     u661:
  1052   00084A  EF11  F004         	goto	l1246
  1053   00084E                     u660:
  1054   00084E                     
  1055                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1056   00084E  0E00               	movlw	0
  1057   000850  6E17               	movwf	(?_vfprintf+1)^0,c
  1058   000852  0E00               	movlw	0
  1059   000854  6E16               	movwf	?_vfprintf^0,c
  1060   000856  0012               	return		;funcret
  1061   000858                     __end_of_vfprintf:
  1062                           	callstack 0
  1063                           
  1064 ;; *************** function _vfpfcnvrt *****************
  1065 ;; Defined at:
  1066 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1067 ;; Parameters:    Size  Location     Type
  1068 ;;  fp              1   10[COMRAM] PTR struct _IO_FILE
  1069 ;;		 -> sprintf@f(11), 
  1070 ;;  fmt             1   11[COMRAM] PTR PTR unsigned char 
  1071 ;;		 -> vfprintf@cfmt(1), 
  1072 ;;  ap              1   12[COMRAM] PTR PTR void 
  1073 ;;		 -> sprintf@ap(1), 
  1074 ;; Auto vars:     Size  Location     Type
  1075 ;;  convarg         4   16[COMRAM] struct .
  1076 ;;  c               1   20[COMRAM] unsigned char 
  1077 ;;  cp              1   15[COMRAM] PTR unsigned char 
  1078 ;;		 -> STR_1(3), 
  1079 ;;  done            1   14[COMRAM] _Bool 
  1080 ;; Return value:  Size  Location     Type
  1081 ;;                  1    wreg      void 
  1082 ;; Registers used:
  1083 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1084 ;; Tracked objects:
  1085 ;;		On entry : 0/0
  1086 ;;		On exit  : 0/0
  1087 ;;		Unchanged: 0/0
  1088 ;; Data sizes:     COMRAM   BANK0   BANK1
  1089 ;;      Params:         3       0       0
  1090 ;;      Locals:         7       0       0
  1091 ;;      Temps:          1       0       0
  1092 ;;      Totals:        11       0       0
  1093 ;;Total ram usage:       11 bytes
  1094 ;; Hardware stack levels used: 1
  1095 ;; Hardware stack levels required when called: 2
  1096 ;; This function calls:
  1097 ;;		___awdiv
  1098 ;;		___awmod
  1099 ;;		_abs
  1100 ;;		_fputc
  1101 ;; This function is called by:
  1102 ;;		_vfprintf
  1103 ;; This function uses a non-reentrant model
  1104 ;;
  1105                           
  1106                           	psect	text5
  1107   000218                     __ptext5:
  1108                           	callstack 0
  1109   000218                     _vfpfcnvrt:
  1110                           	callstack 25
  1111   000218                     
  1112                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1113   000218  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1114   00021A  6ED9               	movwf	fsr2l,c
  1115   00021C  6ADA               	clrf	fsr2h,c
  1116   00021E  CFDF FFF6          	movff	indf2,tblptrl
  1117   000222                     	if	1	;There is more than 1 active tblptr byte
  1118   000222  0E02               	movlw	high __smallconst
  1119   000224  6EF7               	movwf	tblptrh,c
  1120   000226                     	endif
  1121   000226                     	if	0	;tblptru may be non-zero
  1122   000226                     	endif
  1123   000226                     	if	0	;tblptru may be non-zero
  1124   000226                     	endif
  1125   000226  0008               	tblrd		*
  1126   000228  50F5               	movf	tablat,w,c
  1127   00022A  0A25               	xorlw	37
  1128   00022C  A4D8               	btfss	status,2,c
  1129   00022E  EF1B  F001         	goto	u561
  1130   000232  EF1D  F001         	goto	u560
  1131   000236                     u561:
  1132   000236  EFD6  F001         	goto	l1238
  1133   00023A                     u560:
  1134   00023A                     
  1135                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1136   00023A  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1137   00023C  6ED9               	movwf	fsr2l,c
  1138   00023E  6ADA               	clrf	fsr2h,c
  1139   000240  2ADF               	incf	indf2,f,c
  1140   000242                     
  1141                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1142   000242  0E00               	movlw	0
  1143   000244  6E6D               	movwf	(_width+1)^0,c
  1144   000246  0E00               	movlw	0
  1145   000248  6E6C               	movwf	_width^0,c
  1146   00024A  C06C  F070         	movff	_width,_flags
  1147   00024E                     
  1148                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1149   00024E  686E               	setf	_prec^0,c
  1150   000250  686F               	setf	(_prec+1)^0,c
  1151   000252                     
  1152                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1153   000252  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1154   000254  6ED9               	movwf	fsr2l,c
  1155   000256  6ADA               	clrf	fsr2h,c
  1156   000258  50DF               	movf	indf2,w,c
  1157   00025A  6E10               	movwf	vfpfcnvrt@cp^0,c
  1158   00025C                     
  1159                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1160   00025C  C010  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1161   000260                     	if	1	;There is more than 1 active tblptr byte
  1162   000260  0E02               	movlw	high __smallconst
  1163   000262  6EF7               	movwf	tblptrh,c
  1164   000264                     	endif
  1165   000264                     	if	0	;tblptru may be non-zero
  1166   000264                     	endif
  1167   000264                     	if	0	;tblptru may be non-zero
  1168   000264                     	endif
  1169   000264  0008               	tblrd		*
  1170   000266  50F5               	movf	tablat,w,c
  1171   000268  0A64               	xorlw	100
  1172   00026A  B4D8               	btfsc	status,2,c
  1173   00026C  EF3A  F001         	goto	u571
  1174   000270  EF3C  F001         	goto	u570
  1175   000274                     u571:
  1176   000274  EF4A  F001         	goto	l1208
  1177   000278                     u570:
  1178   000278  C010  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1179   00027C                     	if	1	;There is more than 1 active tblptr byte
  1180   00027C  0E02               	movlw	high __smallconst
  1181   00027E  6EF7               	movwf	tblptrh,c
  1182   000280                     	endif
  1183   000280                     	if	0	;tblptru may be non-zero
  1184   000280                     	endif
  1185   000280                     	if	0	;tblptru may be non-zero
  1186   000280                     	endif
  1187   000280  0008               	tblrd		*
  1188   000282  50F5               	movf	tablat,w,c
  1189   000284  0A69               	xorlw	105
  1190   000286  A4D8               	btfss	status,2,c
  1191   000288  EF48  F001         	goto	u581
  1192   00028C  EF4A  F001         	goto	u580
  1193   000290                     u581:
  1194   000290  EFD0  F001         	goto	l1234
  1195   000294                     u580:
  1196   000294                     l1208:
  1197                           
  1198                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1199   000294  500D               	movf	vfpfcnvrt@ap^0,w,c
  1200   000296  6ED9               	movwf	fsr2l,c
  1201   000298  6ADA               	clrf	fsr2h,c
  1202   00029A  0E02               	movlw	2
  1203   00029C  26DF               	addwf	indf2,f,c
  1204   00029E  5CDF               	subwf	indf2,w,c
  1205   0002A0  6ED9               	movwf	fsr2l,c
  1206   0002A2  6ADA               	clrf	fsr2h,c
  1207   0002A4  CFDE F011          	movff	postinc2,vfpfcnvrt@convarg
  1208   0002A8  CFDE F012          	movff	postinc2,vfpfcnvrt@convarg+1
  1209   0002AC                     
  1210                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1211   0002AC  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1212   0002AE  6ED9               	movwf	fsr2l,c
  1213   0002B0  6ADA               	clrf	fsr2h,c
  1214   0002B2  2810               	incf	vfpfcnvrt@cp^0,w,c
  1215   0002B4  6EDF               	movwf	indf2,c
  1216   0002B6                     
  1217                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  1218   0002B6  0E20               	movlw	32
  1219   0002B8  6E15               	movwf	vfpfcnvrt@c^0,c
  1220                           
  1221                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  1222   0002BA  BE12               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1223   0002BC  EF62  F001         	goto	u591
  1224   0002C0  EF65  F001         	goto	u590
  1225   0002C4                     u591:
  1226   0002C4  0E01               	movlw	1
  1227   0002C6  EF66  F001         	goto	u600
  1228   0002CA                     u590:
  1229   0002CA  0E00               	movlw	0
  1230   0002CC                     u600:
  1231   0002CC  6E0F               	movwf	vfpfcnvrt@done^0,c
  1232   0002CE                     l1214:
  1233                           
  1234                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  1235   0002CE  0615               	decf	vfpfcnvrt@c^0,f,c
  1236   0002D0  5015               	movf	vfpfcnvrt@c^0,w,c
  1237   0002D2  0F4C               	addlw	low _dbuf
  1238   0002D4  6ED9               	movwf	fsr2l,c
  1239   0002D6  6ADA               	clrf	fsr2h,c
  1240   0002D8  C011  F001         	movff	vfpfcnvrt@convarg,___awmod@dividend
  1241   0002DC  C012  F002         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  1242   0002E0  0E00               	movlw	0
  1243   0002E2  6E04               	movwf	(___awmod@divisor+1)^0,c
  1244   0002E4  0E0A               	movlw	10
  1245   0002E6  6E03               	movwf	___awmod@divisor^0,c
  1246   0002E8  ECE0  F002         	call	___awmod	;wreg free
  1247   0002EC  C001  F007         	movff	?___awmod,abs@a
  1248   0002F0  C002  F008         	movff	?___awmod+1,abs@a+1
  1249   0002F4  EC46  F004         	call	_abs	;wreg free
  1250   0002F8  5007               	movf	?_abs^0,w,c
  1251   0002FA  0F30               	addlw	48
  1252   0002FC  6EDF               	movwf	indf2,c
  1253   0002FE                     
  1254                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  1255   0002FE  C011  F001         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  1256   000302  C012  F002         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  1257   000306  0E00               	movlw	0
  1258   000308  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1259   00030A  0E0A               	movlw	10
  1260   00030C  6E03               	movwf	___awdiv@divisor^0,c
  1261   00030E  EC7F  F002         	call	___awdiv	;wreg free
  1262   000312  C001  F011         	movff	?___awdiv,vfpfcnvrt@convarg
  1263   000316  C002  F012         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  1264   00031A                     
  1265                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  1266   00031A  5011               	movf	vfpfcnvrt@convarg^0,w,c
  1267   00031C  1012               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  1268   00031E  B4D8               	btfsc	status,2,c
  1269   000320  EF94  F001         	goto	u611
  1270   000324  EF96  F001         	goto	u610
  1271   000328                     u611:
  1272   000328  EF9E  F001         	goto	l1222
  1273   00032C                     u610:
  1274   00032C  5015               	movf	vfpfcnvrt@c^0,w,c
  1275   00032E  A4D8               	btfss	status,2,c
  1276   000330  EF9C  F001         	goto	u621
  1277   000334  EF9E  F001         	goto	u620
  1278   000338                     u621:
  1279   000338  EF67  F001         	goto	l1214
  1280   00033C                     u620:
  1281   00033C                     l1222:
  1282                           
  1283                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  1284   00033C  5015               	movf	vfpfcnvrt@c^0,w,c
  1285   00033E  B4D8               	btfsc	status,2,c
  1286   000340  EFA4  F001         	goto	u631
  1287   000344  EFA6  F001         	goto	u630
  1288   000348                     u631:
  1289   000348  EFC5  F001         	goto	l1232
  1290   00034C                     u630:
  1291   00034C  500F               	movf	vfpfcnvrt@done^0,w,c
  1292   00034E  B4D8               	btfsc	status,2,c
  1293   000350  EFAC  F001         	goto	u641
  1294   000354  EFAE  F001         	goto	u640
  1295   000358                     u641:
  1296   000358  EFC5  F001         	goto	l1232
  1297   00035C                     u640:
  1298   00035C                     
  1299                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  1300   00035C  0615               	decf	vfpfcnvrt@c^0,f,c
  1301   00035E  5015               	movf	vfpfcnvrt@c^0,w,c
  1302   000360  0F4C               	addlw	low _dbuf
  1303   000362  6ED9               	movwf	fsr2l,c
  1304   000364  6ADA               	clrf	fsr2h,c
  1305   000366  0E2D               	movlw	45
  1306   000368  6EDF               	movwf	indf2,c
  1307   00036A  EFC5  F001         	goto	l1232
  1308   00036E                     l1228:
  1309                           
  1310                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  1311   00036E  5015               	movf	vfpfcnvrt@c^0,w,c
  1312   000370  0F4C               	addlw	low _dbuf
  1313   000372  6ED9               	movwf	fsr2l,c
  1314   000374  6ADA               	clrf	fsr2h,c
  1315   000376  50DF               	movf	indf2,w,c
  1316   000378  6E0E               	movwf	??_vfpfcnvrt^0,c
  1317   00037A  500E               	movf	??_vfpfcnvrt^0,w,c
  1318   00037C  6E01               	movwf	fputc@c^0,c
  1319   00037E  6A02               	clrf	(fputc@c+1)^0,c
  1320   000380  C00B  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1321   000384  EC37  F003         	call	_fputc	;wreg free
  1322   000388  2A15               	incf	vfpfcnvrt@c^0,f,c
  1323   00038A                     l1232:
  1324                           
  1325                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  1326   00038A  0E20               	movlw	32
  1327   00038C  1815               	xorwf	vfpfcnvrt@c^0,w,c
  1328   00038E  A4D8               	btfss	status,2,c
  1329   000390  EFCC  F001         	goto	u651
  1330   000394  EFCE  F001         	goto	u650
  1331   000398                     u651:
  1332   000398  EFB7  F001         	goto	l1228
  1333   00039C                     u650:
  1334   00039C  EFE7  F001         	goto	l788
  1335   0003A0                     l1234:
  1336                           
  1337                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1338   0003A0  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1339   0003A2  6ED9               	movwf	fsr2l,c
  1340   0003A4  6ADA               	clrf	fsr2h,c
  1341   0003A6  2ADF               	incf	indf2,f,c
  1342   0003A8  EFE7  F001         	goto	l788
  1343   0003AC                     l1238:
  1344                           
  1345                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1346   0003AC  500C               	movf	vfpfcnvrt@fmt^0,w,c
  1347   0003AE  6ED9               	movwf	fsr2l,c
  1348   0003B0  6ADA               	clrf	fsr2h,c
  1349   0003B2  CFDF FFF6          	movff	indf2,tblptrl
  1350   0003B6                     	if	1	;There is more than 1 active tblptr byte
  1351   0003B6  0E02               	movlw	high __smallconst
  1352   0003B8  6EF7               	movwf	tblptrh,c
  1353   0003BA                     	endif
  1354   0003BA                     	if	0	;tblptru may be non-zero
  1355   0003BA                     	endif
  1356   0003BA                     	if	0	;tblptru may be non-zero
  1357   0003BA                     	endif
  1358   0003BA  0008               	tblrd		*
  1359   0003BC  50F5               	movf	tablat,w,c
  1360   0003BE  6E01               	movwf	fputc@c^0,c
  1361   0003C0  6A02               	clrf	(fputc@c+1)^0,c
  1362   0003C2  C00B  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1363   0003C6  EC37  F003         	call	_fputc	;wreg free
  1364   0003CA  EFD0  F001         	goto	l1234
  1365   0003CE                     l788:
  1366   0003CE  0012               	return		;funcret
  1367   0003D0                     __end_of_vfpfcnvrt:
  1368                           	callstack 0
  1369                           
  1370 ;; *************** function _fputc *****************
  1371 ;; Defined at:
  1372 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputc.c"
  1373 ;; Parameters:    Size  Location     Type
  1374 ;;  c               2    0[COMRAM] int 
  1375 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  1376 ;;		 -> sprintf@f(11), 
  1377 ;; Auto vars:     Size  Location     Type
  1378 ;;		None
  1379 ;; Return value:  Size  Location     Type
  1380 ;;                  2    0[COMRAM] int 
  1381 ;; Registers used:
  1382 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1383 ;; Tracked objects:
  1384 ;;		On entry : 0/0
  1385 ;;		On exit  : 0/0
  1386 ;;		Unchanged: 0/0
  1387 ;; Data sizes:     COMRAM   BANK0   BANK1
  1388 ;;      Params:         3       0       0
  1389 ;;      Locals:         0       0       0
  1390 ;;      Temps:          5       0       0
  1391 ;;      Totals:         8       0       0
  1392 ;;Total ram usage:        8 bytes
  1393 ;; Hardware stack levels used: 1
  1394 ;; Hardware stack levels required when called: 1
  1395 ;; This function calls:
  1396 ;;		_putch
  1397 ;; This function is called by:
  1398 ;;		_vfpfcnvrt
  1399 ;; This function uses a non-reentrant model
  1400 ;;
  1401                           
  1402                           	psect	text6
  1403   00066E                     __ptext6:
  1404                           	callstack 0
  1405   00066E                     _fputc:
  1406                           	callstack 25
  1407   00066E  5003               	movf	fputc@fp^0,w,c
  1408   000670  B4D8               	btfsc	status,2,c
  1409   000672  EF3D  F003         	goto	u511
  1410   000676  EF3F  F003         	goto	u510
  1411   00067A                     u511:
  1412   00067A  EF47  F003         	goto	l1180
  1413   00067E                     u510:
  1414   00067E  5003               	movf	fputc@fp^0,w,c
  1415   000680  A4D8               	btfss	status,2,c
  1416   000682  EF45  F003         	goto	u521
  1417   000686  EF47  F003         	goto	u520
  1418   00068A                     u521:
  1419   00068A  EF4C  F003         	goto	l1182
  1420   00068E                     u520:
  1421   00068E                     l1180:
  1422   00068E  5001               	movf	fputc@c^0,w,c
  1423   000690  EC8F  F004         	call	_putch
  1424   000694  EF8B  F003         	goto	l813
  1425   000698                     l1182:
  1426   000698  5003               	movf	fputc@fp^0,w,c
  1427   00069A  6ED9               	movwf	fsr2l,c
  1428   00069C  6ADA               	clrf	fsr2h,c
  1429   00069E  0E09               	movlw	9
  1430   0006A0  26D9               	addwf	fsr2l,f,c
  1431   0006A2  50DE               	movf	postinc2,w,c
  1432   0006A4  10DE               	iorwf	postinc2,w,c
  1433   0006A6  B4D8               	btfsc	status,2,c
  1434   0006A8  EF58  F003         	goto	u531
  1435   0006AC  EF5A  F003         	goto	u530
  1436   0006B0                     u531:
  1437   0006B0  EF73  F003         	goto	l1186
  1438   0006B4                     u530:
  1439   0006B4  5003               	movf	fputc@fp^0,w,c
  1440   0006B6  6ED9               	movwf	fsr2l,c
  1441   0006B8  6ADA               	clrf	fsr2h,c
  1442   0006BA  0E09               	movlw	9
  1443   0006BC  26D9               	addwf	fsr2l,f,c
  1444   0006BE  5003               	movf	fputc@fp^0,w,c
  1445   0006C0  6EE1               	movwf	fsr1l,c
  1446   0006C2  6AE2               	clrf	fsr1h,c
  1447   0006C4  0E02               	movlw	2
  1448   0006C6  26E1               	addwf	fsr1l,f,c
  1449   0006C8  50DE               	movf	postinc2,w,c
  1450   0006CA  5CE6               	subwf	postinc1,w,c
  1451   0006CC  50E6               	movf	postinc1,w,c
  1452   0006CE  0A80               	xorlw	128
  1453   0006D0  6E08               	movwf	(??_fputc+4)^0,c
  1454   0006D2  50DE               	movf	postinc2,w,c
  1455   0006D4  0A80               	xorlw	128
  1456   0006D6  5808               	subwfb	(??_fputc+4)^0,w,c
  1457   0006D8  B0D8               	btfsc	status,0,c
  1458   0006DA  EF71  F003         	goto	u541
  1459   0006DE  EF73  F003         	goto	u540
  1460   0006E2                     u541:
  1461   0006E2  EF8B  F003         	goto	l813
  1462   0006E6                     u540:
  1463   0006E6                     l1186:
  1464   0006E6  5003               	movf	fputc@fp^0,w,c
  1465   0006E8  6ED9               	movwf	fsr2l,c
  1466   0006EA  6ADA               	clrf	fsr2h,c
  1467   0006EC  0E02               	movlw	2
  1468   0006EE  26D9               	addwf	fsr2l,f,c
  1469   0006F0  50DF               	movf	indf2,w,c
  1470   0006F2  6E04               	movwf	??_fputc^0,c
  1471   0006F4  5003               	movf	fputc@fp^0,w,c
  1472   0006F6  6ED9               	movwf	fsr2l,c
  1473   0006F8  6ADA               	clrf	fsr2h,c
  1474   0006FA  50DF               	movf	indf2,w,c
  1475   0006FC  2404               	addwf	??_fputc^0,w,c
  1476   0006FE  6ED9               	movwf	fsr2l,c
  1477   000700  6ADA               	clrf	fsr2h,c
  1478   000702  C001  FFDF         	movff	fputc@c,indf2
  1479   000706  5003               	movf	fputc@fp^0,w,c
  1480   000708  6ED9               	movwf	fsr2l,c
  1481   00070A  6ADA               	clrf	fsr2h,c
  1482   00070C  0E02               	movlw	2
  1483   00070E  26D9               	addwf	fsr2l,f,c
  1484   000710  2ADE               	incf	postinc2,f,c
  1485   000712  0E00               	movlw	0
  1486   000714  22DD               	addwfc	postdec2,f,c
  1487   000716                     l813:
  1488   000716  0012               	return		;funcret
  1489   000718                     __end_of_fputc:
  1490                           	callstack 0
  1491                           
  1492 ;; *************** function _putch *****************
  1493 ;; Defined at:
  1494 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\putch.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;  c               1    wreg     unsigned char 
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;  c               1    0[COMRAM] unsigned char 
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  1    wreg      void 
  1501 ;; Registers used:
  1502 ;;		wreg
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMRAM   BANK0   BANK1
  1508 ;;      Params:         0       0       0
  1509 ;;      Locals:         0       0       0
  1510 ;;      Temps:          0       0       0
  1511 ;;      Totals:         0       0       0
  1512 ;;Total ram usage:        0 bytes
  1513 ;; Hardware stack levels used: 1
  1514 ;; This function calls:
  1515 ;;		Nothing
  1516 ;; This function is called by:
  1517 ;;		_fputc
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520                           
  1521                           	psect	text7
  1522   00091E                     __ptext7:
  1523                           	callstack 0
  1524   00091E                     _putch:
  1525                           	callstack 25
  1526   00091E  0012               	return		;funcret
  1527   000920                     __end_of_putch:
  1528                           	callstack 0
  1529                           
  1530 ;; *************** function _abs *****************
  1531 ;; Defined at:
  1532 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\abs.c"
  1533 ;; Parameters:    Size  Location     Type
  1534 ;;  a               2    6[COMRAM] int 
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;		None
  1537 ;; Return value:  Size  Location     Type
  1538 ;;                  2    6[COMRAM] int 
  1539 ;; Registers used:
  1540 ;;		wreg, status,2, status,0
  1541 ;; Tracked objects:
  1542 ;;		On entry : 0/0
  1543 ;;		On exit  : 0/0
  1544 ;;		Unchanged: 0/0
  1545 ;; Data sizes:     COMRAM   BANK0   BANK1
  1546 ;;      Params:         2       0       0
  1547 ;;      Locals:         0       0       0
  1548 ;;      Temps:          2       0       0
  1549 ;;      Totals:         4       0       0
  1550 ;;Total ram usage:        4 bytes
  1551 ;; Hardware stack levels used: 1
  1552 ;; This function calls:
  1553 ;;		Nothing
  1554 ;; This function is called by:
  1555 ;;		_vfpfcnvrt
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           	psect	text8
  1560   00088C                     __ptext8:
  1561                           	callstack 0
  1562   00088C                     _abs:
  1563                           	callstack 26
  1564   00088C  BE08               	btfsc	(abs@a+1)^0,7,c
  1565   00088E  EF4B  F004         	goto	u551
  1566   000892  EF4D  F004         	goto	u550
  1567   000896                     u551:
  1568   000896  EF53  F004         	goto	l798
  1569   00089A                     u550:
  1570   00089A  C007  F007         	movff	abs@a,?_abs
  1571   00089E  C008  F008         	movff	abs@a+1,?_abs+1
  1572   0008A2  EF5F  F004         	goto	l801
  1573   0008A6                     l798:
  1574   0008A6  C007  F009         	movff	abs@a,??_abs
  1575   0008AA  C008  F00A         	movff	abs@a+1,??_abs+1
  1576   0008AE  1E09               	comf	??_abs^0,f,c
  1577   0008B0  1E0A               	comf	(??_abs+1)^0,f,c
  1578   0008B2  4A09               	infsnz	??_abs^0,f,c
  1579   0008B4  2A0A               	incf	(??_abs+1)^0,f,c
  1580   0008B6  C009  F007         	movff	??_abs,?_abs
  1581   0008BA  C00A  F008         	movff	??_abs+1,?_abs+1
  1582   0008BE                     l801:
  1583   0008BE  0012               	return		;funcret
  1584   0008C0                     __end_of_abs:
  1585                           	callstack 0
  1586                           
  1587 ;; *************** function ___awmod *****************
  1588 ;; Defined at:
  1589 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;  dividend        2    0[COMRAM] int 
  1592 ;;  divisor         2    2[COMRAM] int 
  1593 ;; Auto vars:     Size  Location     Type
  1594 ;;  sign            1    5[COMRAM] unsigned char 
  1595 ;;  counter         1    4[COMRAM] unsigned char 
  1596 ;; Return value:  Size  Location     Type
  1597 ;;                  2    0[COMRAM] int 
  1598 ;; Registers used:
  1599 ;;		wreg, status,2, status,0
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMRAM   BANK0   BANK1
  1605 ;;      Params:         4       0       0
  1606 ;;      Locals:         2       0       0
  1607 ;;      Temps:          0       0       0
  1608 ;;      Totals:         6       0       0
  1609 ;;Total ram usage:        6 bytes
  1610 ;; Hardware stack levels used: 1
  1611 ;; This function calls:
  1612 ;;		Nothing
  1613 ;; This function is called by:
  1614 ;;		_vfpfcnvrt
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           	psect	text9
  1619   0005C0                     __ptext9:
  1620                           	callstack 0
  1621   0005C0                     ___awmod:
  1622                           	callstack 26
  1623   0005C0  6A06               	clrf	___awmod@sign^0,c
  1624   0005C2  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  1625   0005C4  EFE8  F002         	goto	u450
  1626   0005C8  EFE6  F002         	goto	u451
  1627   0005CC                     u451:
  1628   0005CC  EFEE  F002         	goto	l1148
  1629   0005D0                     u450:
  1630   0005D0  6C01               	negf	___awmod@dividend^0,c
  1631   0005D2  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1632   0005D4  B0D8               	btfsc	status,0,c
  1633   0005D6  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1634   0005D8  0E01               	movlw	1
  1635   0005DA  6E06               	movwf	___awmod@sign^0,c
  1636   0005DC                     l1148:
  1637   0005DC  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  1638   0005DE  EFF5  F002         	goto	u460
  1639   0005E2  EFF3  F002         	goto	u461
  1640   0005E6                     u461:
  1641   0005E6  EFF9  F002         	goto	l1152
  1642   0005EA                     u460:
  1643   0005EA  6C03               	negf	___awmod@divisor^0,c
  1644   0005EC  1E04               	comf	(___awmod@divisor+1)^0,f,c
  1645   0005EE  B0D8               	btfsc	status,0,c
  1646   0005F0  2A04               	incf	(___awmod@divisor+1)^0,f,c
  1647   0005F2                     l1152:
  1648   0005F2  5003               	movf	___awmod@divisor^0,w,c
  1649   0005F4  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  1650   0005F6  B4D8               	btfsc	status,2,c
  1651   0005F8  EF00  F003         	goto	u471
  1652   0005FC  EF02  F003         	goto	u470
  1653   000600                     u471:
  1654   000600  EF26  F003         	goto	l1168
  1655   000604                     u470:
  1656   000604  0E01               	movlw	1
  1657   000606  6E05               	movwf	___awmod@counter^0,c
  1658   000608  EF0A  F003         	goto	l1158
  1659   00060C                     l1156:
  1660   00060C  90D8               	bcf	status,0,c
  1661   00060E  3603               	rlcf	___awmod@divisor^0,f,c
  1662   000610  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  1663   000612  2A05               	incf	___awmod@counter^0,f,c
  1664   000614                     l1158:
  1665   000614  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  1666   000616  EF0F  F003         	goto	u481
  1667   00061A  EF11  F003         	goto	u480
  1668   00061E                     u481:
  1669   00061E  EF06  F003         	goto	l1156
  1670   000622                     u480:
  1671   000622                     l1160:
  1672   000622  5003               	movf	___awmod@divisor^0,w,c
  1673   000624  5C01               	subwf	___awmod@dividend^0,w,c
  1674   000626  5004               	movf	(___awmod@divisor+1)^0,w,c
  1675   000628  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  1676   00062A  A0D8               	btfss	status,0,c
  1677   00062C  EF1A  F003         	goto	u491
  1678   000630  EF1C  F003         	goto	u490
  1679   000634                     u491:
  1680   000634  EF20  F003         	goto	l1164
  1681   000638                     u490:
  1682   000638  5003               	movf	___awmod@divisor^0,w,c
  1683   00063A  5E01               	subwf	___awmod@dividend^0,f,c
  1684   00063C  5004               	movf	(___awmod@divisor+1)^0,w,c
  1685   00063E  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  1686   000640                     l1164:
  1687   000640  90D8               	bcf	status,0,c
  1688   000642  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  1689   000644  3203               	rrcf	___awmod@divisor^0,f,c
  1690   000646  2E05               	decfsz	___awmod@counter^0,f,c
  1691   000648  EF11  F003         	goto	l1160
  1692   00064C                     l1168:
  1693   00064C  5006               	movf	___awmod@sign^0,w,c
  1694   00064E  B4D8               	btfsc	status,2,c
  1695   000650  EF2C  F003         	goto	u501
  1696   000654  EF2E  F003         	goto	u500
  1697   000658                     u501:
  1698   000658  EF32  F003         	goto	l1172
  1699   00065C                     u500:
  1700   00065C  6C01               	negf	___awmod@dividend^0,c
  1701   00065E  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1702   000660  B0D8               	btfsc	status,0,c
  1703   000662  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1704   000664                     l1172:
  1705   000664  C001  F001         	movff	___awmod@dividend,?___awmod
  1706   000668  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  1707   00066C  0012               	return		;funcret
  1708   00066E                     __end_of___awmod:
  1709                           	callstack 0
  1710                           
  1711 ;; *************** function ___awdiv *****************
  1712 ;; Defined at:
  1713 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awdiv.c"
  1714 ;; Parameters:    Size  Location     Type
  1715 ;;  dividend        2    0[COMRAM] int 
  1716 ;;  divisor         2    2[COMRAM] int 
  1717 ;; Auto vars:     Size  Location     Type
  1718 ;;  quotient        2    6[COMRAM] int 
  1719 ;;  sign            1    5[COMRAM] unsigned char 
  1720 ;;  counter         1    4[COMRAM] unsigned char 
  1721 ;; Return value:  Size  Location     Type
  1722 ;;                  2    0[COMRAM] int 
  1723 ;; Registers used:
  1724 ;;		wreg, status,2, status,0
  1725 ;; Tracked objects:
  1726 ;;		On entry : 0/0
  1727 ;;		On exit  : 0/0
  1728 ;;		Unchanged: 0/0
  1729 ;; Data sizes:     COMRAM   BANK0   BANK1
  1730 ;;      Params:         4       0       0
  1731 ;;      Locals:         4       0       0
  1732 ;;      Temps:          0       0       0
  1733 ;;      Totals:         8       0       0
  1734 ;;Total ram usage:        8 bytes
  1735 ;; Hardware stack levels used: 1
  1736 ;; This function calls:
  1737 ;;		Nothing
  1738 ;; This function is called by:
  1739 ;;		_vfpfcnvrt
  1740 ;; This function uses a non-reentrant model
  1741 ;;
  1742                           
  1743                           	psect	text10
  1744   0004FE                     __ptext10:
  1745                           	callstack 0
  1746   0004FE                     ___awdiv:
  1747                           	callstack 26
  1748   0004FE  6A06               	clrf	___awdiv@sign^0,c
  1749   000500  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1750   000502  EF87  F002         	goto	u390
  1751   000506  EF85  F002         	goto	u391
  1752   00050A                     u391:
  1753   00050A  EF8D  F002         	goto	l1104
  1754   00050E                     u390:
  1755   00050E  6C03               	negf	___awdiv@divisor^0,c
  1756   000510  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  1757   000512  B0D8               	btfsc	status,0,c
  1758   000514  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  1759   000516  0E01               	movlw	1
  1760   000518  6E06               	movwf	___awdiv@sign^0,c
  1761   00051A                     l1104:
  1762   00051A  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  1763   00051C  EF94  F002         	goto	u400
  1764   000520  EF92  F002         	goto	u401
  1765   000524                     u401:
  1766   000524  EF9A  F002         	goto	l1110
  1767   000528                     u400:
  1768   000528  6C01               	negf	___awdiv@dividend^0,c
  1769   00052A  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  1770   00052C  B0D8               	btfsc	status,0,c
  1771   00052E  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  1772   000530  0E01               	movlw	1
  1773   000532  1A06               	xorwf	___awdiv@sign^0,f,c
  1774   000534                     l1110:
  1775   000534  0E00               	movlw	0
  1776   000536  6E08               	movwf	(___awdiv@quotient+1)^0,c
  1777   000538  0E00               	movlw	0
  1778   00053A  6E07               	movwf	___awdiv@quotient^0,c
  1779   00053C  5003               	movf	___awdiv@divisor^0,w,c
  1780   00053E  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  1781   000540  B4D8               	btfsc	status,2,c
  1782   000542  EFA5  F002         	goto	u411
  1783   000546  EFA7  F002         	goto	u410
  1784   00054A                     u411:
  1785   00054A  EFCF  F002         	goto	l1132
  1786   00054E                     u410:
  1787   00054E  0E01               	movlw	1
  1788   000550  6E05               	movwf	___awdiv@counter^0,c
  1789   000552  EFAF  F002         	goto	l1118
  1790   000556                     l1116:
  1791   000556  90D8               	bcf	status,0,c
  1792   000558  3603               	rlcf	___awdiv@divisor^0,f,c
  1793   00055A  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  1794   00055C  2A05               	incf	___awdiv@counter^0,f,c
  1795   00055E                     l1118:
  1796   00055E  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  1797   000560  EFB4  F002         	goto	u421
  1798   000564  EFB6  F002         	goto	u420
  1799   000568                     u421:
  1800   000568  EFAB  F002         	goto	l1116
  1801   00056C                     u420:
  1802   00056C                     l1120:
  1803   00056C  90D8               	bcf	status,0,c
  1804   00056E  3607               	rlcf	___awdiv@quotient^0,f,c
  1805   000570  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  1806   000572  5003               	movf	___awdiv@divisor^0,w,c
  1807   000574  5C01               	subwf	___awdiv@dividend^0,w,c
  1808   000576  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1809   000578  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  1810   00057A  A0D8               	btfss	status,0,c
  1811   00057C  EFC2  F002         	goto	u431
  1812   000580  EFC4  F002         	goto	u430
  1813   000584                     u431:
  1814   000584  EFC9  F002         	goto	l1128
  1815   000588                     u430:
  1816   000588  5003               	movf	___awdiv@divisor^0,w,c
  1817   00058A  5E01               	subwf	___awdiv@dividend^0,f,c
  1818   00058C  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1819   00058E  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  1820   000590  8007               	bsf	___awdiv@quotient^0,0,c
  1821   000592                     l1128:
  1822   000592  90D8               	bcf	status,0,c
  1823   000594  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  1824   000596  3203               	rrcf	___awdiv@divisor^0,f,c
  1825   000598  2E05               	decfsz	___awdiv@counter^0,f,c
  1826   00059A  EFB6  F002         	goto	l1120
  1827   00059E                     l1132:
  1828   00059E  5006               	movf	___awdiv@sign^0,w,c
  1829   0005A0  B4D8               	btfsc	status,2,c
  1830   0005A2  EFD5  F002         	goto	u441
  1831   0005A6  EFD7  F002         	goto	u440
  1832   0005AA                     u441:
  1833   0005AA  EFDB  F002         	goto	l1136
  1834   0005AE                     u440:
  1835   0005AE  6C07               	negf	___awdiv@quotient^0,c
  1836   0005B0  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  1837   0005B2  B0D8               	btfsc	status,0,c
  1838   0005B4  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  1839   0005B6                     l1136:
  1840   0005B6  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1841   0005BA  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1842   0005BE  0012               	return		;funcret
  1843   0005C0                     __end_of___awdiv:
  1844                           	callstack 0
  1845                           
  1846 ;; *************** function _UART_Write_String *****************
  1847 ;; Defined at:
  1848 ;;		line 27 in file "main.c"
  1849 ;; Parameters:    Size  Location     Type
  1850 ;;  text            2    1[COMRAM] PTR const unsigned char 
  1851 ;;		 -> STR_3(3), STR_2(19), UART_Write_Int@buffer(20), 
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;		None
  1854 ;; Return value:  Size  Location     Type
  1855 ;;                  1    wreg      void 
  1856 ;; Registers used:
  1857 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1858 ;; Tracked objects:
  1859 ;;		On entry : 0/0
  1860 ;;		On exit  : 0/0
  1861 ;;		Unchanged: 0/0
  1862 ;; Data sizes:     COMRAM   BANK0   BANK1
  1863 ;;      Params:         2       0       0
  1864 ;;      Locals:         0       0       0
  1865 ;;      Temps:          0       0       0
  1866 ;;      Totals:         2       0       0
  1867 ;;Total ram usage:        2 bytes
  1868 ;; Hardware stack levels used: 1
  1869 ;; Hardware stack levels required when called: 1
  1870 ;; This function calls:
  1871 ;;		_UART_Write
  1872 ;; This function is called by:
  1873 ;;		_UART_Write_Int
  1874 ;;		_main
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878                           	psect	text11
  1879   0007BC                     __ptext11:
  1880                           	callstack 0
  1881   0007BC                     _UART_Write_String:
  1882                           	callstack 29
  1883   0007BC                     
  1884                           ;main.c: 27: void UART_Write_String(const char *text);main.c: 28: {;main.c: 29:     whil
      +                          e (*text) {
  1885   0007BC  EFF4  F003         	goto	l1260
  1886   0007C0                     l1256:
  1887                           
  1888                           ;main.c: 30:         UART_Write(*text++);
  1889   0007C0  C002  FFF6         	movff	UART_Write_String@text,tblptrl
  1890   0007C4  C003  FFF7         	movff	UART_Write_String@text+1,tblptrh
  1891   0007C8  6AF8               	clrf	tblptru,c
  1892   0007CA  0E01               	movlw	(high __ramtop+-1)
  1893   0007CC  64F7               	cpfsgt	tblptrh,c
  1894   0007CE  D003               	bra	u677
  1895   0007D0  0008               	tblrd		*
  1896   0007D2  50F5               	movf	tablat,w,c
  1897   0007D4  D005               	bra	u670
  1898   0007D6                     u677:
  1899   0007D6  CFF6 FFE1          	movff	tblptrl,fsr1l
  1900   0007DA  CFF7 FFE2          	movff	tblptrh,fsr1h
  1901   0007DE  50E7               	movf	indf1,w,c
  1902   0007E0                     u670:
  1903   0007E0  EC7B  F004         	call	_UART_Write
  1904   0007E4  4A02               	infsnz	UART_Write_String@text^0,f,c
  1905   0007E6  2A03               	incf	(UART_Write_String@text+1)^0,f,c
  1906   0007E8                     l1260:
  1907                           
  1908                           ;main.c: 29:     while (*text) {
  1909   0007E8  C002  FFF6         	movff	UART_Write_String@text,tblptrl
  1910   0007EC  C003  FFF7         	movff	UART_Write_String@text+1,tblptrh
  1911   0007F0  6AF8               	clrf	tblptru,c
  1912   0007F2  0E01               	movlw	(high __ramtop+-1)
  1913   0007F4  64F7               	cpfsgt	tblptrh,c
  1914   0007F6  D003               	bra	u687
  1915   0007F8  0008               	tblrd		*
  1916   0007FA  50F5               	movf	tablat,w,c
  1917   0007FC  D005               	bra	u680
  1918   0007FE                     u687:
  1919   0007FE  CFF6 FFE1          	movff	tblptrl,fsr1l
  1920   000802  CFF7 FFE2          	movff	tblptrh,fsr1h
  1921   000806  50E7               	movf	indf1,w,c
  1922   000808                     u680:
  1923   000808  0900               	iorlw	0
  1924   00080A  A4D8               	btfss	status,2,c
  1925   00080C  EF0A  F004         	goto	u691
  1926   000810  EF0C  F004         	goto	u690
  1927   000814                     u691:
  1928   000814  EFE0  F003         	goto	l1256
  1929   000818                     u690:
  1930   000818  0012               	return		;funcret
  1931   00081A                     __end_of_UART_Write_String:
  1932                           	callstack 0
  1933                           
  1934 ;; *************** function _UART_Write *****************
  1935 ;; Defined at:
  1936 ;;		line 21 in file "main.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;  data            1    wreg     unsigned char 
  1939 ;; Auto vars:     Size  Location     Type
  1940 ;;  data            1    0[COMRAM] unsigned char 
  1941 ;; Return value:  Size  Location     Type
  1942 ;;                  1    wreg      void 
  1943 ;; Registers used:
  1944 ;;		wreg
  1945 ;; Tracked objects:
  1946 ;;		On entry : 0/0
  1947 ;;		On exit  : 0/0
  1948 ;;		Unchanged: 0/0
  1949 ;; Data sizes:     COMRAM   BANK0   BANK1
  1950 ;;      Params:         0       0       0
  1951 ;;      Locals:         1       0       0
  1952 ;;      Temps:          0       0       0
  1953 ;;      Totals:         1       0       0
  1954 ;;Total ram usage:        1 bytes
  1955 ;; Hardware stack levels used: 1
  1956 ;; This function calls:
  1957 ;;		Nothing
  1958 ;; This function is called by:
  1959 ;;		_UART_Write_String
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           	psect	text12
  1964   0008F6                     __ptext12:
  1965                           	callstack 0
  1966   0008F6                     _UART_Write:
  1967                           	callstack 29
  1968                           
  1969                           ;incstack = 0
  1970                           ;UART_Write@data stored from wreg
  1971   0008F6  6E01               	movwf	UART_Write@data^0,c
  1972   0008F8                     l38:
  1973   0008F8  A2AC               	btfss	172,1,c	;volatile
  1974   0008FA  EF81  F004         	goto	u281
  1975   0008FE  EF83  F004         	goto	u280
  1976   000902                     u281:
  1977   000902  EF7C  F004         	goto	l38
  1978   000906                     u280:
  1979   000906                     
  1980                           ;main.c: 24:     TXREG = data;
  1981   000906  C001  FFAD         	movff	UART_Write@data,4013	;volatile
  1982   00090A  0012               	return		;funcret
  1983   00090C                     __end_of_UART_Write:
  1984                           	callstack 0
  1985                           
  1986 ;; *************** function _UART_Init *****************
  1987 ;; Defined at:
  1988 ;;		line 7 in file "main.c"
  1989 ;; Parameters:    Size  Location     Type
  1990 ;;  baud_rate       4    0[COMRAM] unsigned long 
  1991 ;; Auto vars:     Size  Location     Type
  1992 ;;		None
  1993 ;; Return value:  Size  Location     Type
  1994 ;;                  1    wreg      void 
  1995 ;; Registers used:
  1996 ;;		wreg, status,2
  1997 ;; Tracked objects:
  1998 ;;		On entry : 0/0
  1999 ;;		On exit  : 0/0
  2000 ;;		Unchanged: 0/0
  2001 ;; Data sizes:     COMRAM   BANK0   BANK1
  2002 ;;      Params:         4       0       0
  2003 ;;      Locals:         0       0       0
  2004 ;;      Temps:          0       0       0
  2005 ;;      Totals:         4       0       0
  2006 ;;Total ram usage:        4 bytes
  2007 ;; Hardware stack levels used: 1
  2008 ;; This function calls:
  2009 ;;		Nothing
  2010 ;; This function is called by:
  2011 ;;		_main
  2012 ;; This function uses a non-reentrant model
  2013 ;;
  2014                           
  2015                           	psect	text13
  2016   00090C                     __ptext13:
  2017                           	callstack 0
  2018   00090C                     _UART_Init:
  2019                           	callstack 30
  2020   00090C                     
  2021                           ;main.c: 7: void UART_Init(unsigned long baud_rate);main.c: 8: {;main.c: 9:     SPBRG = 
      +                          12;
  2022   00090C  0E0C               	movlw	12
  2023   00090E  6EAF               	movwf	175,c	;volatile
  2024   000910                     
  2025                           ;main.c: 10:     TXSTAbits.BRGH = 0;
  2026   000910  94AC               	bcf	172,2,c	;volatile
  2027   000912                     
  2028                           ;main.c: 12:     TRISCbits.TRISC6 = 0;
  2029   000912  9C94               	bcf	148,6,c	;volatile
  2030   000914                     
  2031                           ;main.c: 13:     TRISCbits.TRISC7 = 1;
  2032   000914  8E94               	bsf	148,7,c	;volatile
  2033   000916                     
  2034                           ;main.c: 15:     RCSTAbits.SPEN = 1;
  2035   000916  8EAB               	bsf	171,7,c	;volatile
  2036   000918                     
  2037                           ;main.c: 16:     TXSTAbits.TXEN = 1;
  2038   000918  8AAC               	bsf	172,5,c	;volatile
  2039   00091A                     
  2040                           ;main.c: 17:     RCSTAbits.CREN = 1;
  2041   00091A  88AB               	bsf	171,4,c	;volatile
  2042   00091C  0012               	return		;funcret
  2043   00091E                     __end_of_UART_Init:
  2044                           	callstack 0
  2045                           
  2046                           	psect	rparam
  2047   000001                     ___rparam_used  equ	1
  2048   000000                     ___param_bank   equ	0
  2049   000000                     __Lparam        equ	__Lrparam
  2050   000000                     __Hparam        equ	__Hrparam
  2051                           
  2052                           	psect	config
  2053                           
  2054                           ; Padding undefined space
  2055   300000                     	org	3145728
  2056   300000  FF                 	db	255
  2057                           
  2058                           ;Config register CONFIG1H @ 0x300001
  2059                           ;	Oscillator
  2060                           ;	OSC = INTIO2, Internal oscillator block, port function on RA6 and RA7
  2061                           ;	Fail-Safe Clock Monitor Enable bit
  2062                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2063                           ;	Internal/External Oscillator Switchover bit
  2064                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2065   300001                     	org	3145729
  2066   300001  08                 	db	8
  2067                           
  2068                           ;Config register CONFIG2L @ 0x300002
  2069                           ;	Power-up Timer Enable bit
  2070                           ;	PWRT = OFF, PWRT disabled
  2071                           ;	Brown-out Reset Enable bits
  2072                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  2073                           ;	Brown-out Reset Voltage bits
  2074                           ;	BORV = 3, Minimum Setting
  2075   300002                     	org	3145730
  2076   300002  19                 	db	25
  2077                           
  2078                           ;Config register CONFIG2H @ 0x300003
  2079                           ;	Watchdog Timer Enable bit
  2080                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2081                           ;	Watchdog Timer Postscale Select bits
  2082                           ;	WDTPS = 32768, 1:32768
  2083   300003                     	org	3145731
  2084   300003  1E                 	db	30
  2085                           
  2086                           ; Padding undefined space
  2087   300004                     	org	3145732
  2088   300004  FF                 	db	255
  2089                           
  2090                           ;Config register CONFIG3H @ 0x300005
  2091                           ;	CCP2 MUX bit
  2092                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  2093                           ;	PORTB A/D Enable bit
  2094                           ;	PBADEN = ANA, PORTB<4:0> pins are configured as analog input channels on Reset
  2095                           ;	Low-Power Timer1 Oscillator Enable bit
  2096                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2097                           ;	MCLR Pin Enable bit
  2098                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2099   300005                     	org	3145733
  2100   300005  83                 	db	131
  2101                           
  2102                           ;Config register CONFIG4L @ 0x300006
  2103                           ;	Stack Full/Underflow Reset Enable bit
  2104                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2105                           ;	Single-Supply ICSP Enable bit
  2106                           ;	LVP = ON, Single-Supply ICSP enabled
  2107                           ;	Boot Block Size Select bits
  2108                           ;	BBSIZ = BB256, 256 Word
  2109                           ;	Extended Instruction Set Enable bit
  2110                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2111                           ;	Background Debugger Enable bit
  2112                           ;	DEBUG = 0x1, unprogrammed default
  2113   300006                     	org	3145734
  2114   300006  85                 	db	133
  2115                           
  2116                           ; Padding undefined space
  2117   300007                     	org	3145735
  2118   300007  FF                 	db	255
  2119                           
  2120                           ;Config register CONFIG5L @ 0x300008
  2121                           ;	Code Protection bit
  2122                           ;	CP0 = OFF, Block 0 not code-protected
  2123                           ;	Code Protection bit
  2124                           ;	CP1 = OFF, Block 1 not code-protected
  2125   300008                     	org	3145736
  2126   300008  03                 	db	3
  2127                           
  2128                           ;Config register CONFIG5H @ 0x300009
  2129                           ;	Boot Block Code Protection bitProtect Boot
  2130                           ;	CPB = OFF, Boot block not code-protected
  2131                           ;	Data EEPROM Code Protection bit
  2132                           ;	CPD = OFF, Data EEPROM not code-protected
  2133   300009                     	org	3145737
  2134   300009  C0                 	db	192
  2135                           
  2136                           ;Config register CONFIG6L @ 0x30000A
  2137                           ;	Write Protection bit
  2138                           ;	WRT0 = OFF, Block 0 not write-protected
  2139                           ;	Write Protection bit
  2140                           ;	WRT1 = OFF, Block 1 not write-protected
  2141   30000A                     	org	3145738
  2142   30000A  03                 	db	3
  2143                           
  2144                           ;Config register CONFIG6H @ 0x30000B
  2145                           ;	Configuration Register Write Protection bit
  2146                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2147                           ;	Boot Block Write Protection bit
  2148                           ;	WRTB = OFF, Boot block not write-protected
  2149                           ;	Data EEPROM Write Protection bit
  2150                           ;	WRTD = OFF, Data EEPROM not write-protected
  2151   30000B                     	org	3145739
  2152   30000B  E0                 	db	224
  2153                           
  2154                           ;Config register CONFIG7L @ 0x30000C
  2155                           ;	Table Read Protection bit
  2156                           ;	EBTR0 = OFF, Block 0 not protected from table reads executed in other blocks
  2157                           ;	Table Read Protection bit
  2158                           ;	EBTR1 = OFF, Block 1 not protected from table reads executed in other blocks
  2159   30000C                     	org	3145740
  2160   30000C  03                 	db	3
  2161                           
  2162                           ;Config register CONFIG7H @ 0x30000D
  2163                           ;	Boot Block Table Read Protection bit
  2164                           ;	EBTRB = OFF, Boot block not protected from table reads executed in other blocks
  2165   30000D                     	org	3145741
  2166   30000D  40                 	db	64
  2167                           tosu	equ	0xFFF
  2168                           tosh	equ	0xFFE
  2169                           tosl	equ	0xFFD
  2170                           stkptr	equ	0xFFC
  2171                           pclatu	equ	0xFFB
  2172                           pclath	equ	0xFFA
  2173                           pcl	equ	0xFF9
  2174                           tblptru	equ	0xFF8
  2175                           tblptrh	equ	0xFF7
  2176                           tblptrl	equ	0xFF6
  2177                           tablat	equ	0xFF5
  2178                           prodh	equ	0xFF4
  2179                           prodl	equ	0xFF3
  2180                           indf0	equ	0xFEF
  2181                           postinc0	equ	0xFEE
  2182                           postdec0	equ	0xFED
  2183                           preinc0	equ	0xFEC
  2184                           plusw0	equ	0xFEB
  2185                           fsr0h	equ	0xFEA
  2186                           fsr0l	equ	0xFE9
  2187                           wreg	equ	0xFE8
  2188                           indf1	equ	0xFE7
  2189                           postinc1	equ	0xFE6
  2190                           postdec1	equ	0xFE5
  2191                           preinc1	equ	0xFE4
  2192                           plusw1	equ	0xFE3
  2193                           fsr1h	equ	0xFE2
  2194                           fsr1l	equ	0xFE1
  2195                           bsr	equ	0xFE0
  2196                           indf2	equ	0xFDF
  2197                           postinc2	equ	0xFDE
  2198                           postdec2	equ	0xFDD
  2199                           preinc2	equ	0xFDC
  2200                           plusw2	equ	0xFDB
  2201                           fsr2h	equ	0xFDA
  2202                           fsr2l	equ	0xFD9
  2203                           status	equ	0xFD8

Data Sizes:
    Strings     22
    Constant    0
    Data        0
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     75     112
    BANK0           128      0       0
    BANK1           256      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 20
		 -> UART_Write_Int@buffer(COMRAM[20]), 

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 20
		 -> UART_Write_Int@buffer(COMRAM[20]), 

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    S908$buffer	PTR unsigned char  size(1) Largest target is 20
		 -> UART_Write_Int@buffer(COMRAM[20]), 

    S908$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 20
		 -> UART_Write_Int@buffer(COMRAM[20]), 

    UART_Write_String@text	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_2(CODE[19]), STR_3(CODE[3]), UART_Write_Int@buffer(COMRAM[20]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _main->_UART_Write_Int
    _UART_Write_Int->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    _UART_Write_String->_UART_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0    2217
                                             63 COMRAM    12    12      0
                          _UART_Init
                     _UART_Write_Int
                  _UART_Write_String
                            ___lldiv
 ---------------------------------------------------------------------------------
 (1) ___lldiv                                             13     5      8     164
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _UART_Write_Int                                      22    20      2    1896
                                             41 COMRAM    22    20      2
                  _UART_Write_String
                            ___lldiv (ARG)
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             18    14      4    1760
                                             25 COMRAM    16    12      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             4     1      3    1559
                                             21 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           11     8      3    1434
                                             10 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     230
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2      67
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     302
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _UART_Write_String                                    2     0      2      63
                                              1 COMRAM     2     0      2
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            4     0      4       1
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Init
   _UART_Write_Int
     _UART_Write_String
       _UART_Write
     ___lldiv (ARG)
     _sprintf (ARG)
       _vfprintf
         _vfpfcnvrt
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _fputc
             _putch
   _UART_Write_String
   ___lldiv

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM             511      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      0       0      0.0%
BITCOMRAM          127      0       0      0.0%
COMRAM             127     75     112     88.2%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRllh        22      0       0      0.0%
BITBIGSFRlll        19      0       0      0.0%
BITBIGSFRlh          1      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     112      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Mon Jan 06 17:36:54 2025

                       l41 090A                         l50 08DE                         l35 091C  
                       l38 08F8                         l62 0444                         l47 0818  
                       l64 0446                         l99 07AA               ___awdiv@sign 0006  
                      l106 07BA                        l303 05BE                        l316 066C  
                      l801 08BE                        l813 0716                        l750 088A  
                      l824 091E                        l794 0856                        l788 03CE  
                      l974 08F8                        l798 08A6                        l976 0906  
                      u400 0528                        u401 0524                        u410 054E  
                      u411 054A                        u420 056C                        u500 065C  
                      u421 0568                        u501 0658                        u430 0588  
                      u510 067E                        u431 0584                        u511 067A  
                      u280 0906                        u440 05AE                        u520 068E  
                      u600 02CC                        u281 0902                        u441 05AA  
                      u521 068A                        u450 05D0                        u530 06B4  
                      u610 032C                        u451 05CC                        u531 06B0  
                      u611 0328                        u460 05EA                        u540 06E6  
                      u620 033C                        u700 073E                        u461 05E6  
                      u541 06E2                        u621 0338                        u701 073A  
                      u390 050E                        u470 0604                        u550 089A  
                      u630 034C                        u710 0760                        u391 050A  
                      u471 0600                        u551 0896                        u631 0348  
                      u711 075C                        u480 0622                        u640 035C  
                      u560 023A                        u720 0788                        u481 061E  
                      u641 0358                        u561 0236                        u721 0784  
                      u490 0638                        u650 039C                        u570 0278  
                      u730 0454                        u491 0634                        u651 0398  
                      u571 0274                        u731 0450                        u580 0294  
                      u660 084E                        u740 04A6                        u581 0290  
                      u661 084A                        u741 04A2                        u670 07E0  
                      u590 02CA                        u591 02C4                        u680 0808  
                      u690 0818                        u691 0814                        u677 07D6  
                      u757 03F2                        u687 07FE                        u767 04EC  
                      _abs 088C               ___awmod@sign 0006                        wreg 0FE8  
                     l1100 050E                       l1110 0534                       l1102 0516  
                     l1120 056C                       l1112 053C                       l1104 051A  
                     l1200 024E                       l1130 0598                       l1122 0572  
                     l1114 054E                       l1106 0528                       l1210 02AC  
                     l1202 0252                       ?_abs 0007                       l1124 0588  
                     l1116 0556                       l1132 059E                       l1108 0530  
                     l1140 05C0                       l1220 032C                       l1212 02B6  
                     l1204 025C                       l1300 0752                       l1134 05AE  
                     l1126 0590                       l1118 055E                       l1150 05EA  
                     l1142 05C2                       l1230 0388                       l1222 033C  
                     l1214 02CE                       l1206 0278                       l1310 079A  
                     l1302 0760                       l1136 05B6                       l1128 0592  
                     l1160 0622                       l1152 05F2                       l1144 05D0  
                     l1224 034C                       l1232 038A                       l1216 02FE  
                     l1208 0294                       l1312 07A4                       l1304 076A  
                     l1320 03FE                       l1170 065C                       l1162 0638  
                     l1154 0604                       l1146 05D8                       l1226 035C  
                     l1218 031A                       l1234 03A0                       l1250 084E  
                     l1306 0788                       l1330 0420                       l1322 040E  
                     l1314 03D0                       l1260 07E8                       l1172 0664  
                     l1164 0640                       l1156 060C                       l1148 05DC  
                     l1180 068E                       l1228 036E                       l1244 081A  
                     l1308 0798                       l1332 0422                       l1324 0412  
                     l1316 03D4                       l1254 07BC                       l1166 0646  
                     l1158 0614                       l1190 088C                       l1182 0698  
                     l1238 03AC                       l1246 0822                       l1270 0880  
                     l1262 0858                       l1350 04A6                       l1334 042A  
                     l1326 0414                       l1318 03E8                       l1280 0914  
                     l1256 07C0                       l1096 04FE                       l1168 064C  
                     l1192 089A                       l1184 06B4                       l1176 066E  
                     l1248 0832                       l1264 0860                       l1352 04D6  
                     l1344 0454                       l1336 042C                       l1328 0418  
                     l1282 0916                       l1274 090C                       l1258 07E4  
                     l1098 0500                       l1186 06E6                       l1178 067E  
                     l1194 0218                       l1266 0868                       l1290 08D4  
                     l1354 04E6                       l1346 048C                       l1338 043C  
                     l1284 0918                       l1276 0910                       l1196 023A  
                     l1268 0870                       l1292 0718                       l1348 0490  
                     l1286 091A                       l1278 0912                       l1198 0242  
                     l1294 0728                       l1288 08C0                       l1296 073E  
                     l1298 0746                       STR_1 0214                       STR_2 0201  
                     STR_3 0211                       abs@a 0007                       _dbuf 004C  
                     _main 03D0                       _prec 006E                       fsr1h 0FE2  
                     fsr2h 0FDA                       indf1 0FE7                       indf2 0FDF  
                     fsr1l 0FE1                       fsr2l 0FD9                       start 0000  
             ___param_bank 0000                      ??_abs 0009                      ?_main 0001  
          __end_of___awdiv 05C0            __end_of___awmod 066E            __end_of___lldiv 07BC  
          ___awdiv@divisor 0003            ___awdiv@counter 0005                      _RCREG 0FAE  
             vfpfcnvrt@fmt 000C                      _SPBRG 0FAF                      _TXREG 0FAD  
              ?_UART_Write 0001                      _flags 0070                      _fputc 066E  
                    _width 006C                      _putch 091E                      main@i 004A  
                    tablat 0FF5                      status 0FD8            __end_of_sprintf 088C  
          __initialization 08E0               __end_of_main 04FE                     ??_main 0040  
            __activetblptr 0002                     _ADCON1 0FC1                     ?_fputc 0001  
                   _ADRESH 0FC4                     _ADRESL 0FC3           ___awdiv@dividend 0001  
                   ?_putch 0001              vfpfcnvrt@done 000F               vfprintf@cfmt 0019  
        __end_of_UART_Init 091E                  ??___awdiv 0005                  ??___awmod 0005  
                ??___lldiv 0009                     clear_0 08E6           ___awdiv@quotient 0007  
          ___awmod@divisor 0003                     isa$std 0001            ___awmod@counter 0005  
                   fputc@c 0001               __mediumconst 0000                     tblptrh 0FF7  
                   tblptrl 0FF6                     tblptru 0FF8                     putch@c 0001  
         __end_of_vfprintf 0858                  ??_sprintf 001E                 __accesstop 0080  
  __end_of__initialization 08EC              ___rparam_used 0001             __pcstackCOMRAM 0001  
            __end_of_fputc 0718              __end_of_putch 0920                    ??_fputc 0004  
                  ??_putch 0001               ??_UART_Write 0001                    __Hparam 0000  
                  __Lparam 0000                    ___awdiv 04FE                    ___awmod 05C0  
                  ___lldiv 0718         __end_of_UART_Write 090C                  ?_vfprintf 0016  
             __psmallconst 0200                    __pcinit 08E0                    __ramtop 0200  
                  __ptext0 03D0                    __ptext1 0718                    __ptext2 08C0  
                  __ptext3 0858                    __ptext4 081A                    __ptext5 0218  
                  __ptext6 066E                    __ptext7 091E                    __ptext8 088C  
                  __ptext9 05C0           ___awmod@dividend 0001                    _sprintf 0858  
                  main@num 0044                    main@sum 0046       end_of_initialization 08EC  
                  fputc@fp 0003              __Lmediumconst 0000            ___lldiv@divisor 0005  
          ___lldiv@counter 000D          __end_of_vfpfcnvrt 03D0                  _RCSTAbits 0FAB  
                  postdec2 0FDD                    postinc0 0FEE                    postinc1 0FE6  
                  postinc2 0FDE           vfpfcnvrt@convarg 0011                 ??_vfprintf 0019  
           _UART_Write_Int 08C0                  _UART_Init 090C             UART_Write@data 0001  
       UART_Init@baud_rate 0001                  _TRISBbits 0F93                  _TRISCbits 0F94  
    UART_Write_String@text 0002                  _TXSTAbits 0FAC     __end_of_UART_Write_Int 08E0  
              vfpfcnvrt@ap 000D                vfpfcnvrt@cp 0010                vfpfcnvrt@fp 000B  
               ?_UART_Init 0001        start_initialization 08E0                __end_of_abs 08C0  
              vfprintf@fmt 0017            ?_UART_Write_Int 002A       UART_Write_Int@buffer 002C  
              __pbssCOMRAM 004C                   ?___awdiv 0001                   ?___awmod 0001  
                 ?___lldiv 0001                ??_UART_Init 0005                __smallconst 0200  
                 ?_sprintf 001A                   _PIR1bits 0F9E                  _vfpfcnvrt 0218  
               _ADCON0bits 0FC2                 _ADCON2bits 0FC0                 vfpfcnvrt@c 0015  
                 __Hrparam 0000                 vfprintf@ap 0018                   __Lrparam 0000  
               vfprintf@fp 0016        UART_Write_Int@value 002A                 ?_vfpfcnvrt 000B  
        _UART_Write_String 07BC                 sprintf@fmt 001B         ?_UART_Write_String 0002  
                 __ptext10 04FE                   __ptext11 07BC                   __ptext12 08F6  
                 __ptext13 090C        ??_UART_Write_String 0004           ??_UART_Write_Int 002C  
                 isa$xinst 0000                   _vfprintf 081A  __end_of_UART_Write_String 081A  
                sprintf@ap 001E           ___lldiv@dividend 0001                 _OSCCONbits 0FD3  
              ??_vfpfcnvrt 000E                   sprintf@f 001F                   sprintf@s 001A  
         ___lldiv@quotient 0009                 _UART_Write 08F6  
